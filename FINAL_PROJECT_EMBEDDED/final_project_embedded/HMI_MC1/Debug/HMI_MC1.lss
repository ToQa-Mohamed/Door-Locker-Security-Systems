
HMI_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e0  00800060  00002f9c  00003030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800140  00800140  00003110  2**0
                  ALLOC
  3 .stab         00002d60  00000000  00000000  00003110  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011f0  00000000  00000000  00005e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000071a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007310  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008f59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000abf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ad54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000afe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b7af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 14 15 	jmp	0x2a28	; 0x2a28 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 34       	cpi	r26, 0x40	; 64
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e4       	ldi	r26, 0x40	; 64
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 34       	cpi	r26, 0x46	; 70
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 70 08 	call	0x10e0	; 0x10e0 <main>
      8a:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 50 17 	jmp	0x2ea0	; 0x2ea0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e3       	ldi	r26, 0x30	; 48
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6c 17 	jmp	0x2ed8	; 0x2ed8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5c 17 	jmp	0x2eb8	; 0x2eb8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 78 17 	jmp	0x2ef0	; 0x2ef0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5c 17 	jmp	0x2eb8	; 0x2eb8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 78 17 	jmp	0x2ef0	; 0x2ef0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 50 17 	jmp	0x2ea0	; 0x2ea0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e3       	ldi	r24, 0x30	; 48
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6c 17 	jmp	0x2ed8	; 0x2ed8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5c 17 	jmp	0x2eb8	; 0x2eb8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 78 17 	jmp	0x2ef0	; 0x2ef0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5c 17 	jmp	0x2eb8	; 0x2eb8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 78 17 	jmp	0x2ef0	; 0x2ef0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5c 17 	jmp	0x2eb8	; 0x2eb8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 78 17 	jmp	0x2ef0	; 0x2ef0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <timer0_count1>:
 *******************************************************************************/

/*global variable to count overflows*/
uint32 count1 = 0;

void timer0_count1(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	count1++;
     b4e:	80 91 40 01 	lds	r24, 0x0140
     b52:	90 91 41 01 	lds	r25, 0x0141
     b56:	a0 91 42 01 	lds	r26, 0x0142
     b5a:	b0 91 43 01 	lds	r27, 0x0143
     b5e:	01 96       	adiw	r24, 0x01	; 1
     b60:	a1 1d       	adc	r26, r1
     b62:	b1 1d       	adc	r27, r1
     b64:	80 93 40 01 	sts	0x0140, r24
     b68:	90 93 41 01 	sts	0x0141, r25
     b6c:	a0 93 42 01 	sts	0x0142, r26
     b70:	b0 93 43 01 	sts	0x0143, r27
}
     b74:	cf 91       	pop	r28
     b76:	df 91       	pop	r29
     b78:	08 95       	ret

00000b7a <Password>:

void Password(uint8 *new_password) { /* function to take values from keypad and store in array of 5 numbers  */
     b7a:	df 93       	push	r29
     b7c:	cf 93       	push	r28
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
     b82:	63 97       	sbiw	r28, 0x13	; 19
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	de bf       	out	0x3e, r29	; 62
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	cd bf       	out	0x3d, r28	; 61
     b8e:	9b 8b       	std	Y+19, r25	; 0x13
     b90:	8a 8b       	std	Y+18, r24	; 0x12
	uint8 key_num;

	for (int i = 0; i < 5; i++) {
     b92:	18 8a       	std	Y+16, r1	; 0x10
     b94:	1f 86       	std	Y+15, r1	; 0x0f
     b96:	8b c0       	rjmp	.+278    	; 0xcae <Password+0x134>
		key_num = KEYPAD_getPressedKey();
     b98:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <KEYPAD_getPressedKey>
     b9c:	89 8b       	std	Y+17, r24	; 0x11
		if ((key_num >= 0) && (key_num <= 9)) {
     b9e:	89 89       	ldd	r24, Y+17	; 0x11
     ba0:	8a 30       	cpi	r24, 0x0A	; 10
     ba2:	70 f4       	brcc	.+28     	; 0xbc0 <Password+0x46>
			new_password[i] = key_num;
     ba4:	2f 85       	ldd	r18, Y+15	; 0x0f
     ba6:	38 89       	ldd	r19, Y+16	; 0x10
     ba8:	8a 89       	ldd	r24, Y+18	; 0x12
     baa:	9b 89       	ldd	r25, Y+19	; 0x13
     bac:	fc 01       	movw	r30, r24
     bae:	e2 0f       	add	r30, r18
     bb0:	f3 1f       	adc	r31, r19
     bb2:	89 89       	ldd	r24, Y+17	; 0x11
     bb4:	80 83       	st	Z, r24
			LCD_intgerToString(key_num);
     bb6:	89 89       	ldd	r24, Y+17	; 0x11
     bb8:	88 2f       	mov	r24, r24
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_intgerToString>
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	aa ef       	ldi	r26, 0xFA	; 250
     bc6:	b3 e4       	ldi	r27, 0x43	; 67
     bc8:	8b 87       	std	Y+11, r24	; 0x0b
     bca:	9c 87       	std	Y+12, r25	; 0x0c
     bcc:	ad 87       	std	Y+13, r26	; 0x0d
     bce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bd0:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd2:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd4:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd6:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	4a ef       	ldi	r20, 0xFA	; 250
     bde:	54 e4       	ldi	r21, 0x44	; 68
     be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be4:	dc 01       	movw	r26, r24
     be6:	cb 01       	movw	r24, r22
     be8:	8f 83       	std	Y+7, r24	; 0x07
     bea:	98 87       	std	Y+8, r25	; 0x08
     bec:	a9 87       	std	Y+9, r26	; 0x09
     bee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bf0:	6f 81       	ldd	r22, Y+7	; 0x07
     bf2:	78 85       	ldd	r23, Y+8	; 0x08
     bf4:	89 85       	ldd	r24, Y+9	; 0x09
     bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	40 e8       	ldi	r20, 0x80	; 128
     bfe:	5f e3       	ldi	r21, 0x3F	; 63
     c00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c04:	88 23       	and	r24, r24
     c06:	2c f4       	brge	.+10     	; 0xc12 <Password+0x98>
		__ticks = 1;
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	9e 83       	std	Y+6, r25	; 0x06
     c0e:	8d 83       	std	Y+5, r24	; 0x05
     c10:	3f c0       	rjmp	.+126    	; 0xc90 <Password+0x116>
	else if (__tmp > 65535)
     c12:	6f 81       	ldd	r22, Y+7	; 0x07
     c14:	78 85       	ldd	r23, Y+8	; 0x08
     c16:	89 85       	ldd	r24, Y+9	; 0x09
     c18:	9a 85       	ldd	r25, Y+10	; 0x0a
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	3f ef       	ldi	r19, 0xFF	; 255
     c1e:	4f e7       	ldi	r20, 0x7F	; 127
     c20:	57 e4       	ldi	r21, 0x47	; 71
     c22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c26:	18 16       	cp	r1, r24
     c28:	4c f5       	brge	.+82     	; 0xc7c <Password+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
     c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
     c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c30:	9e 85       	ldd	r25, Y+14	; 0x0e
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e2       	ldi	r20, 0x20	; 32
     c38:	51 e4       	ldi	r21, 0x41	; 65
     c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c3e:	dc 01       	movw	r26, r24
     c40:	cb 01       	movw	r24, r22
     c42:	bc 01       	movw	r22, r24
     c44:	cd 01       	movw	r24, r26
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	0f c0       	rjmp	.+30     	; 0xc72 <Password+0xf8>
     c54:	88 ec       	ldi	r24, 0xC8	; 200
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	9c 83       	std	Y+4, r25	; 0x04
     c5a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	9c 81       	ldd	r25, Y+4	; 0x04
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	f1 f7       	brne	.-4      	; 0xc60 <Password+0xe6>
     c64:	9c 83       	std	Y+4, r25	; 0x04
     c66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c68:	8d 81       	ldd	r24, Y+5	; 0x05
     c6a:	9e 81       	ldd	r25, Y+6	; 0x06
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	9e 83       	std	Y+6, r25	; 0x06
     c70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c72:	8d 81       	ldd	r24, Y+5	; 0x05
     c74:	9e 81       	ldd	r25, Y+6	; 0x06
     c76:	00 97       	sbiw	r24, 0x00	; 0
     c78:	69 f7       	brne	.-38     	; 0xc54 <Password+0xda>
     c7a:	14 c0       	rjmp	.+40     	; 0xca4 <Password+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c7c:	6f 81       	ldd	r22, Y+7	; 0x07
     c7e:	78 85       	ldd	r23, Y+8	; 0x08
     c80:	89 85       	ldd	r24, Y+9	; 0x09
     c82:	9a 85       	ldd	r25, Y+10	; 0x0a
     c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c88:	dc 01       	movw	r26, r24
     c8a:	cb 01       	movw	r24, r22
     c8c:	9e 83       	std	Y+6, r25	; 0x06
     c8e:	8d 83       	std	Y+5, r24	; 0x05
     c90:	8d 81       	ldd	r24, Y+5	; 0x05
     c92:	9e 81       	ldd	r25, Y+6	; 0x06
     c94:	9a 83       	std	Y+2, r25	; 0x02
     c96:	89 83       	std	Y+1, r24	; 0x01
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	9a 81       	ldd	r25, Y+2	; 0x02
     c9c:	01 97       	sbiw	r24, 0x01	; 1
     c9e:	f1 f7       	brne	.-4      	; 0xc9c <Password+0x122>
     ca0:	9a 83       	std	Y+2, r25	; 0x02
     ca2:	89 83       	std	Y+1, r24	; 0x01
}

void Password(uint8 *new_password) { /* function to take values from keypad and store in array of 5 numbers  */
	uint8 key_num;

	for (int i = 0; i < 5; i++) {
     ca4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ca6:	98 89       	ldd	r25, Y+16	; 0x10
     ca8:	01 96       	adiw	r24, 0x01	; 1
     caa:	98 8b       	std	Y+16, r25	; 0x10
     cac:	8f 87       	std	Y+15, r24	; 0x0f
     cae:	8f 85       	ldd	r24, Y+15	; 0x0f
     cb0:	98 89       	ldd	r25, Y+16	; 0x10
     cb2:	85 30       	cpi	r24, 0x05	; 5
     cb4:	91 05       	cpc	r25, r1
     cb6:	0c f4       	brge	.+2      	; 0xcba <Password+0x140>
     cb8:	6f cf       	rjmp	.-290    	; 0xb98 <Password+0x1e>
			new_password[i] = key_num;
			LCD_intgerToString(key_num);
		}
		_delay_ms(500);
	}
}
     cba:	63 96       	adiw	r28, 0x13	; 19
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	cf 91       	pop	r28
     cc8:	df 91       	pop	r29
     cca:	08 95       	ret

00000ccc <send_password>:

void send_password(uint8 *new_password) /* function to send password to MC2 to save in eeprom */
{
     ccc:	df 93       	push	r29
     cce:	cf 93       	push	r28
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	62 97       	sbiw	r28, 0x12	; 18
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	cd bf       	out	0x3d, r28	; 61
     ce0:	9a 8b       	std	Y+18, r25	; 0x12
     ce2:	89 8b       	std	Y+17, r24	; 0x11
	for (int i = 0; i < 5; i++) {
     ce4:	18 8a       	std	Y+16, r1	; 0x10
     ce6:	1f 86       	std	Y+15, r1	; 0x0f
     ce8:	81 c0       	rjmp	.+258    	; 0xdec <send_password+0x120>
		UART_sendByte(new_password[i]);
     cea:	2f 85       	ldd	r18, Y+15	; 0x0f
     cec:	38 89       	ldd	r19, Y+16	; 0x10
     cee:	89 89       	ldd	r24, Y+17	; 0x11
     cf0:	9a 89       	ldd	r25, Y+18	; 0x12
     cf2:	fc 01       	movw	r30, r24
     cf4:	e2 0f       	add	r30, r18
     cf6:	f3 1f       	adc	r31, r19
     cf8:	80 81       	ld	r24, Z
     cfa:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <UART_sendByte>
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	a8 ec       	ldi	r26, 0xC8	; 200
     d04:	b2 e4       	ldi	r27, 0x42	; 66
     d06:	8b 87       	std	Y+11, r24	; 0x0b
     d08:	9c 87       	std	Y+12, r25	; 0x0c
     d0a:	ad 87       	std	Y+13, r26	; 0x0d
     d0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d0e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d10:	7c 85       	ldd	r23, Y+12	; 0x0c
     d12:	8d 85       	ldd	r24, Y+13	; 0x0d
     d14:	9e 85       	ldd	r25, Y+14	; 0x0e
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	4a ef       	ldi	r20, 0xFA	; 250
     d1c:	54 e4       	ldi	r21, 0x44	; 68
     d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d22:	dc 01       	movw	r26, r24
     d24:	cb 01       	movw	r24, r22
     d26:	8f 83       	std	Y+7, r24	; 0x07
     d28:	98 87       	std	Y+8, r25	; 0x08
     d2a:	a9 87       	std	Y+9, r26	; 0x09
     d2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d2e:	6f 81       	ldd	r22, Y+7	; 0x07
     d30:	78 85       	ldd	r23, Y+8	; 0x08
     d32:	89 85       	ldd	r24, Y+9	; 0x09
     d34:	9a 85       	ldd	r25, Y+10	; 0x0a
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	40 e8       	ldi	r20, 0x80	; 128
     d3c:	5f e3       	ldi	r21, 0x3F	; 63
     d3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d42:	88 23       	and	r24, r24
     d44:	2c f4       	brge	.+10     	; 0xd50 <send_password+0x84>
		__ticks = 1;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	9e 83       	std	Y+6, r25	; 0x06
     d4c:	8d 83       	std	Y+5, r24	; 0x05
     d4e:	3f c0       	rjmp	.+126    	; 0xdce <send_password+0x102>
	else if (__tmp > 65535)
     d50:	6f 81       	ldd	r22, Y+7	; 0x07
     d52:	78 85       	ldd	r23, Y+8	; 0x08
     d54:	89 85       	ldd	r24, Y+9	; 0x09
     d56:	9a 85       	ldd	r25, Y+10	; 0x0a
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	3f ef       	ldi	r19, 0xFF	; 255
     d5c:	4f e7       	ldi	r20, 0x7F	; 127
     d5e:	57 e4       	ldi	r21, 0x47	; 71
     d60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d64:	18 16       	cp	r1, r24
     d66:	4c f5       	brge	.+82     	; 0xdba <send_password+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d68:	6b 85       	ldd	r22, Y+11	; 0x0b
     d6a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	40 e2       	ldi	r20, 0x20	; 32
     d76:	51 e4       	ldi	r21, 0x41	; 65
     d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	bc 01       	movw	r22, r24
     d82:	cd 01       	movw	r24, r26
     d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d88:	dc 01       	movw	r26, r24
     d8a:	cb 01       	movw	r24, r22
     d8c:	9e 83       	std	Y+6, r25	; 0x06
     d8e:	8d 83       	std	Y+5, r24	; 0x05
     d90:	0f c0       	rjmp	.+30     	; 0xdb0 <send_password+0xe4>
     d92:	88 ec       	ldi	r24, 0xC8	; 200
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	9c 83       	std	Y+4, r25	; 0x04
     d98:	8b 83       	std	Y+3, r24	; 0x03
     d9a:	8b 81       	ldd	r24, Y+3	; 0x03
     d9c:	9c 81       	ldd	r25, Y+4	; 0x04
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	f1 f7       	brne	.-4      	; 0xd9e <send_password+0xd2>
     da2:	9c 83       	std	Y+4, r25	; 0x04
     da4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     da6:	8d 81       	ldd	r24, Y+5	; 0x05
     da8:	9e 81       	ldd	r25, Y+6	; 0x06
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	9e 83       	std	Y+6, r25	; 0x06
     dae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     db0:	8d 81       	ldd	r24, Y+5	; 0x05
     db2:	9e 81       	ldd	r25, Y+6	; 0x06
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	69 f7       	brne	.-38     	; 0xd92 <send_password+0xc6>
     db8:	14 c0       	rjmp	.+40     	; 0xde2 <send_password+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dba:	6f 81       	ldd	r22, Y+7	; 0x07
     dbc:	78 85       	ldd	r23, Y+8	; 0x08
     dbe:	89 85       	ldd	r24, Y+9	; 0x09
     dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	9e 83       	std	Y+6, r25	; 0x06
     dcc:	8d 83       	std	Y+5, r24	; 0x05
     dce:	8d 81       	ldd	r24, Y+5	; 0x05
     dd0:	9e 81       	ldd	r25, Y+6	; 0x06
     dd2:	9a 83       	std	Y+2, r25	; 0x02
     dd4:	89 83       	std	Y+1, r24	; 0x01
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	9a 81       	ldd	r25, Y+2	; 0x02
     dda:	01 97       	sbiw	r24, 0x01	; 1
     ddc:	f1 f7       	brne	.-4      	; 0xdda <send_password+0x10e>
     dde:	9a 83       	std	Y+2, r25	; 0x02
     de0:	89 83       	std	Y+1, r24	; 0x01
	}
}

void send_password(uint8 *new_password) /* function to send password to MC2 to save in eeprom */
{
	for (int i = 0; i < 5; i++) {
     de2:	8f 85       	ldd	r24, Y+15	; 0x0f
     de4:	98 89       	ldd	r25, Y+16	; 0x10
     de6:	01 96       	adiw	r24, 0x01	; 1
     de8:	98 8b       	std	Y+16, r25	; 0x10
     dea:	8f 87       	std	Y+15, r24	; 0x0f
     dec:	8f 85       	ldd	r24, Y+15	; 0x0f
     dee:	98 89       	ldd	r25, Y+16	; 0x10
     df0:	85 30       	cpi	r24, 0x05	; 5
     df2:	91 05       	cpc	r25, r1
     df4:	0c f4       	brge	.+2      	; 0xdf8 <send_password+0x12c>
     df6:	79 cf       	rjmp	.-270    	; 0xcea <send_password+0x1e>
		UART_sendByte(new_password[i]);
		_delay_ms(100);
	}
}
     df8:	62 96       	adiw	r28, 0x12	; 18
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	f8 94       	cli
     dfe:	de bf       	out	0x3e, r29	; 62
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	cd bf       	out	0x3d, r28	; 61
     e04:	cf 91       	pop	r28
     e06:	df 91       	pop	r29
     e08:	08 95       	ret

00000e0a <newPassword>:

void newPassword(uint8 match_flag, uint8 *password1, uint8 *password2) { /* function to take password 2 times and check them */
     e0a:	df 93       	push	r29
     e0c:	cf 93       	push	r28
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	a4 97       	sbiw	r28, 0x24	; 36
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	de bf       	out	0x3e, r29	; 62
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	cd bf       	out	0x3d, r28	; 61
     e1e:	88 a3       	std	Y+32, r24	; 0x20
     e20:	7a a3       	std	Y+34, r23	; 0x22
     e22:	69 a3       	std	Y+33, r22	; 0x21
     e24:	5c a3       	std	Y+36, r21	; 0x24
     e26:	4b a3       	std	Y+35, r20	; 0x23

	uint8 correct_flag = 0; /* to check if the two passwords are the same */
     e28:	1f 8e       	std	Y+31, r1	; 0x1f
     e2a:	4d c1       	rjmp	.+666    	; 0x10c6 <newPassword+0x2bc>
	while (correct_flag == 0) {
		LCD_clearScreen();
     e2c:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <LCD_clearScreen>
		LCD_displayString("Enter new password:");
     e30:	80 e6       	ldi	r24, 0x60	; 96
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_displayString>
		LCD_moveCursor(1, 0);
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_moveCursor>
		UART_sendByte(STORE_EEPROM);
     e40:	81 ef       	ldi	r24, 0xF1	; 241
     e42:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <UART_sendByte>
		Password(password1);
     e46:	89 a1       	ldd	r24, Y+33	; 0x21
     e48:	9a a1       	ldd	r25, Y+34	; 0x22
     e4a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <Password>

		if (KEYPAD_getPressedKey() == 13) {
     e4e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <KEYPAD_getPressedKey>
     e52:	8d 30       	cpi	r24, 0x0D	; 13
     e54:	31 f4       	brne	.+12     	; 0xe62 <newPassword+0x58>
			LCD_clearScreen();
     e56:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <LCD_clearScreen>
			send_password(password1);
     e5a:	89 a1       	ldd	r24, Y+33	; 0x21
     e5c:	9a a1       	ldd	r25, Y+34	; 0x22
     e5e:	0e 94 66 06 	call	0xccc	; 0xccc <send_password>
		}
		LCD_clearScreen();
     e62:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <LCD_clearScreen>
		LCD_displayString("Reenter password:");
     e66:	84 e7       	ldi	r24, 0x74	; 116
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_displayString>
		LCD_moveCursor(1, 0);
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_moveCursor>
		Password(password2);
     e76:	8b a1       	ldd	r24, Y+35	; 0x23
     e78:	9c a1       	ldd	r25, Y+36	; 0x24
     e7a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <Password>
		if (KEYPAD_getPressedKey() == 13) {
     e7e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <KEYPAD_getPressedKey>
     e82:	8d 30       	cpi	r24, 0x0D	; 13
     e84:	09 f0       	breq	.+2      	; 0xe88 <newPassword+0x7e>
     e86:	1f c1       	rjmp	.+574    	; 0x10c6 <newPassword+0x2bc>
			LCD_clearScreen();
     e88:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <LCD_clearScreen>
			for (int i = 0; i < 5; i++) {
     e8c:	1e 8e       	std	Y+30, r1	; 0x1e
     e8e:	1d 8e       	std	Y+29, r1	; 0x1d
     e90:	1c c0       	rjmp	.+56     	; 0xeca <newPassword+0xc0>
				if (password1[i] == password2[i]) {
     e92:	2d 8d       	ldd	r18, Y+29	; 0x1d
     e94:	3e 8d       	ldd	r19, Y+30	; 0x1e
     e96:	89 a1       	ldd	r24, Y+33	; 0x21
     e98:	9a a1       	ldd	r25, Y+34	; 0x22
     e9a:	fc 01       	movw	r30, r24
     e9c:	e2 0f       	add	r30, r18
     e9e:	f3 1f       	adc	r31, r19
     ea0:	40 81       	ld	r20, Z
     ea2:	2d 8d       	ldd	r18, Y+29	; 0x1d
     ea4:	3e 8d       	ldd	r19, Y+30	; 0x1e
     ea6:	8b a1       	ldd	r24, Y+35	; 0x23
     ea8:	9c a1       	ldd	r25, Y+36	; 0x24
     eaa:	fc 01       	movw	r30, r24
     eac:	e2 0f       	add	r30, r18
     eae:	f3 1f       	adc	r31, r19
     eb0:	80 81       	ld	r24, Z
     eb2:	48 17       	cp	r20, r24
     eb4:	39 f4       	brne	.+14     	; 0xec4 <newPassword+0xba>
					match_flag = 0;
     eb6:	18 a2       	std	Y+32, r1	; 0x20
		LCD_displayString("Reenter password:");
		LCD_moveCursor(1, 0);
		Password(password2);
		if (KEYPAD_getPressedKey() == 13) {
			LCD_clearScreen();
			for (int i = 0; i < 5; i++) {
     eb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eba:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ebc:	01 96       	adiw	r24, 0x01	; 1
     ebe:	9e 8f       	std	Y+30, r25	; 0x1e
     ec0:	8d 8f       	std	Y+29, r24	; 0x1d
     ec2:	03 c0       	rjmp	.+6      	; 0xeca <newPassword+0xc0>
				if (password1[i] == password2[i]) {
					match_flag = 0;
				} else {
					match_flag = 1;
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	88 a3       	std	Y+32, r24	; 0x20
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <newPassword+0xca>
		LCD_displayString("Reenter password:");
		LCD_moveCursor(1, 0);
		Password(password2);
		if (KEYPAD_getPressedKey() == 13) {
			LCD_clearScreen();
			for (int i = 0; i < 5; i++) {
     eca:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ecc:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ece:	85 30       	cpi	r24, 0x05	; 5
     ed0:	91 05       	cpc	r25, r1
     ed2:	fc f2       	brlt	.-66     	; 0xe92 <newPassword+0x88>
				} else {
					match_flag = 1;
					break;
				}
			}
			if (match_flag == 0) {
     ed4:	88 a1       	ldd	r24, Y+32	; 0x20
     ed6:	88 23       	and	r24, r24
     ed8:	09 f0       	breq	.+2      	; 0xedc <newPassword+0xd2>
     eda:	7b c0       	rjmp	.+246    	; 0xfd2 <newPassword+0x1c8>
				LCD_displayString("Saved");
     edc:	86 e8       	ldi	r24, 0x86	; 134
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_displayString>
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	aa ef       	ldi	r26, 0xFA	; 250
     eea:	b3 e4       	ldi	r27, 0x43	; 67
     eec:	89 8f       	std	Y+25, r24	; 0x19
     eee:	9a 8f       	std	Y+26, r25	; 0x1a
     ef0:	ab 8f       	std	Y+27, r26	; 0x1b
     ef2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef4:	69 8d       	ldd	r22, Y+25	; 0x19
     ef6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ef8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     efa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	4a ef       	ldi	r20, 0xFA	; 250
     f02:	54 e4       	ldi	r21, 0x44	; 68
     f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	8d 8b       	std	Y+21, r24	; 0x15
     f0e:	9e 8b       	std	Y+22, r25	; 0x16
     f10:	af 8b       	std	Y+23, r26	; 0x17
     f12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f14:	6d 89       	ldd	r22, Y+21	; 0x15
     f16:	7e 89       	ldd	r23, Y+22	; 0x16
     f18:	8f 89       	ldd	r24, Y+23	; 0x17
     f1a:	98 8d       	ldd	r25, Y+24	; 0x18
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	40 e8       	ldi	r20, 0x80	; 128
     f22:	5f e3       	ldi	r21, 0x3F	; 63
     f24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f28:	88 23       	and	r24, r24
     f2a:	2c f4       	brge	.+10     	; 0xf36 <newPassword+0x12c>
		__ticks = 1;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	9c 8b       	std	Y+20, r25	; 0x14
     f32:	8b 8b       	std	Y+19, r24	; 0x13
     f34:	3f c0       	rjmp	.+126    	; 0xfb4 <newPassword+0x1aa>
	else if (__tmp > 65535)
     f36:	6d 89       	ldd	r22, Y+21	; 0x15
     f38:	7e 89       	ldd	r23, Y+22	; 0x16
     f3a:	8f 89       	ldd	r24, Y+23	; 0x17
     f3c:	98 8d       	ldd	r25, Y+24	; 0x18
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	3f ef       	ldi	r19, 0xFF	; 255
     f42:	4f e7       	ldi	r20, 0x7F	; 127
     f44:	57 e4       	ldi	r21, 0x47	; 71
     f46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f4a:	18 16       	cp	r1, r24
     f4c:	4c f5       	brge	.+82     	; 0xfa0 <newPassword+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f4e:	69 8d       	ldd	r22, Y+25	; 0x19
     f50:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f52:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f54:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	40 e2       	ldi	r20, 0x20	; 32
     f5c:	51 e4       	ldi	r21, 0x41	; 65
     f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	bc 01       	movw	r22, r24
     f68:	cd 01       	movw	r24, r26
     f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6e:	dc 01       	movw	r26, r24
     f70:	cb 01       	movw	r24, r22
     f72:	9c 8b       	std	Y+20, r25	; 0x14
     f74:	8b 8b       	std	Y+19, r24	; 0x13
     f76:	0f c0       	rjmp	.+30     	; 0xf96 <newPassword+0x18c>
     f78:	88 ec       	ldi	r24, 0xC8	; 200
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	9a 8b       	std	Y+18, r25	; 0x12
     f7e:	89 8b       	std	Y+17, r24	; 0x11
     f80:	89 89       	ldd	r24, Y+17	; 0x11
     f82:	9a 89       	ldd	r25, Y+18	; 0x12
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	f1 f7       	brne	.-4      	; 0xf84 <newPassword+0x17a>
     f88:	9a 8b       	std	Y+18, r25	; 0x12
     f8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f8c:	8b 89       	ldd	r24, Y+19	; 0x13
     f8e:	9c 89       	ldd	r25, Y+20	; 0x14
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	9c 8b       	std	Y+20, r25	; 0x14
     f94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f96:	8b 89       	ldd	r24, Y+19	; 0x13
     f98:	9c 89       	ldd	r25, Y+20	; 0x14
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	69 f7       	brne	.-38     	; 0xf78 <newPassword+0x16e>
     f9e:	14 c0       	rjmp	.+40     	; 0xfc8 <newPassword+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa0:	6d 89       	ldd	r22, Y+21	; 0x15
     fa2:	7e 89       	ldd	r23, Y+22	; 0x16
     fa4:	8f 89       	ldd	r24, Y+23	; 0x17
     fa6:	98 8d       	ldd	r25, Y+24	; 0x18
     fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	9c 8b       	std	Y+20, r25	; 0x14
     fb2:	8b 8b       	std	Y+19, r24	; 0x13
     fb4:	8b 89       	ldd	r24, Y+19	; 0x13
     fb6:	9c 89       	ldd	r25, Y+20	; 0x14
     fb8:	98 8b       	std	Y+16, r25	; 0x10
     fba:	8f 87       	std	Y+15, r24	; 0x0f
     fbc:	8f 85       	ldd	r24, Y+15	; 0x0f
     fbe:	98 89       	ldd	r25, Y+16	; 0x10
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <newPassword+0x1b6>
     fc4:	98 8b       	std	Y+16, r25	; 0x10
     fc6:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				LCD_clearScreen();
     fc8:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <LCD_clearScreen>
				correct_flag = 1;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	8f 8f       	std	Y+31, r24	; 0x1f
     fd0:	7a c0       	rjmp	.+244    	; 0x10c6 <newPassword+0x2bc>
			} else {
				LCD_clearScreen();
     fd2:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <LCD_clearScreen>
				LCD_displayString("Wrong password");
     fd6:	8c e8       	ldi	r24, 0x8C	; 140
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_displayString>
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	aa ef       	ldi	r26, 0xFA	; 250
     fe4:	b3 e4       	ldi	r27, 0x43	; 67
     fe6:	8b 87       	std	Y+11, r24	; 0x0b
     fe8:	9c 87       	std	Y+12, r25	; 0x0c
     fea:	ad 87       	std	Y+13, r26	; 0x0d
     fec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fee:	6b 85       	ldd	r22, Y+11	; 0x0b
     ff0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ff2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	4a ef       	ldi	r20, 0xFA	; 250
     ffc:	54 e4       	ldi	r21, 0x44	; 68
     ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1002:	dc 01       	movw	r26, r24
    1004:	cb 01       	movw	r24, r22
    1006:	8f 83       	std	Y+7, r24	; 0x07
    1008:	98 87       	std	Y+8, r25	; 0x08
    100a:	a9 87       	std	Y+9, r26	; 0x09
    100c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    100e:	6f 81       	ldd	r22, Y+7	; 0x07
    1010:	78 85       	ldd	r23, Y+8	; 0x08
    1012:	89 85       	ldd	r24, Y+9	; 0x09
    1014:	9a 85       	ldd	r25, Y+10	; 0x0a
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	40 e8       	ldi	r20, 0x80	; 128
    101c:	5f e3       	ldi	r21, 0x3F	; 63
    101e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1022:	88 23       	and	r24, r24
    1024:	2c f4       	brge	.+10     	; 0x1030 <newPassword+0x226>
		__ticks = 1;
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	9e 83       	std	Y+6, r25	; 0x06
    102c:	8d 83       	std	Y+5, r24	; 0x05
    102e:	3f c0       	rjmp	.+126    	; 0x10ae <newPassword+0x2a4>
	else if (__tmp > 65535)
    1030:	6f 81       	ldd	r22, Y+7	; 0x07
    1032:	78 85       	ldd	r23, Y+8	; 0x08
    1034:	89 85       	ldd	r24, Y+9	; 0x09
    1036:	9a 85       	ldd	r25, Y+10	; 0x0a
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	3f ef       	ldi	r19, 0xFF	; 255
    103c:	4f e7       	ldi	r20, 0x7F	; 127
    103e:	57 e4       	ldi	r21, 0x47	; 71
    1040:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1044:	18 16       	cp	r1, r24
    1046:	4c f5       	brge	.+82     	; 0x109a <newPassword+0x290>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1048:	6b 85       	ldd	r22, Y+11	; 0x0b
    104a:	7c 85       	ldd	r23, Y+12	; 0x0c
    104c:	8d 85       	ldd	r24, Y+13	; 0x0d
    104e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	40 e2       	ldi	r20, 0x20	; 32
    1056:	51 e4       	ldi	r21, 0x41	; 65
    1058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	bc 01       	movw	r22, r24
    1062:	cd 01       	movw	r24, r26
    1064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	9e 83       	std	Y+6, r25	; 0x06
    106e:	8d 83       	std	Y+5, r24	; 0x05
    1070:	0f c0       	rjmp	.+30     	; 0x1090 <newPassword+0x286>
    1072:	88 ec       	ldi	r24, 0xC8	; 200
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	9c 83       	std	Y+4, r25	; 0x04
    1078:	8b 83       	std	Y+3, r24	; 0x03
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	9c 81       	ldd	r25, Y+4	; 0x04
    107e:	01 97       	sbiw	r24, 0x01	; 1
    1080:	f1 f7       	brne	.-4      	; 0x107e <newPassword+0x274>
    1082:	9c 83       	std	Y+4, r25	; 0x04
    1084:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1086:	8d 81       	ldd	r24, Y+5	; 0x05
    1088:	9e 81       	ldd	r25, Y+6	; 0x06
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	9e 83       	std	Y+6, r25	; 0x06
    108e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1090:	8d 81       	ldd	r24, Y+5	; 0x05
    1092:	9e 81       	ldd	r25, Y+6	; 0x06
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	69 f7       	brne	.-38     	; 0x1072 <newPassword+0x268>
    1098:	14 c0       	rjmp	.+40     	; 0x10c2 <newPassword+0x2b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    109a:	6f 81       	ldd	r22, Y+7	; 0x07
    109c:	78 85       	ldd	r23, Y+8	; 0x08
    109e:	89 85       	ldd	r24, Y+9	; 0x09
    10a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	9e 83       	std	Y+6, r25	; 0x06
    10ac:	8d 83       	std	Y+5, r24	; 0x05
    10ae:	8d 81       	ldd	r24, Y+5	; 0x05
    10b0:	9e 81       	ldd	r25, Y+6	; 0x06
    10b2:	9a 83       	std	Y+2, r25	; 0x02
    10b4:	89 83       	std	Y+1, r24	; 0x01
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	f1 f7       	brne	.-4      	; 0x10ba <newPassword+0x2b0>
    10be:	9a 83       	std	Y+2, r25	; 0x02
    10c0:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				LCD_clearScreen();
    10c2:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <LCD_clearScreen>
}

void newPassword(uint8 match_flag, uint8 *password1, uint8 *password2) { /* function to take password 2 times and check them */

	uint8 correct_flag = 0; /* to check if the two passwords are the same */
	while (correct_flag == 0) {
    10c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10c8:	88 23       	and	r24, r24
    10ca:	09 f4       	brne	.+2      	; 0x10ce <newPassword+0x2c4>
    10cc:	af ce       	rjmp	.-674    	; 0xe2c <newPassword+0x22>
				LCD_clearScreen();
			}

		}
	}
}
    10ce:	a4 96       	adiw	r28, 0x24	; 36
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <main>:

int main(void) {
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	ca 55       	subi	r28, 0x5A	; 90
    10ee:	d0 40       	sbci	r29, 0x00	; 0
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61

	uint8 new_password[5]; /*new entered password*/
	uint8 new_password_repeated[5]; /* enter the password again */
	uint8 eeprom_password[5]; /*password sent by the MC2 from eeprom*/
	uint8 old_password[5]; /*old password entered by the user*/
	uint8 matched_flag = 0; /* set when the two new passwords don't match*/
    10fa:	1e aa       	std	Y+54, r1	; 0x36
	uint8 matched_flag2 = 0; /* set when the two old passwords don't match*/
    10fc:	1d aa       	std	Y+53, r1	; 0x35
	uint8 error_flag = 0; /*to count the number of wrongly entered passwords*/
    10fe:	1c aa       	std	Y+52, r1	; 0x34
	uint8 correct_flag = 0; /*while it is 0 we repeat the loop again until entering correct password*/
    1100:	1b aa       	std	Y+51, r1	; 0x33

	/* Enable interrupts by setting I-bit */
	SREG |= (1 << 7);
    1102:	af e5       	ldi	r26, 0x5F	; 95
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	ef e5       	ldi	r30, 0x5F	; 95
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	80 68       	ori	r24, 0x80	; 128
    110e:	8c 93       	st	X, r24

	/* Initialize LCD driver */
	LCD_init();
    1110:	0e 94 58 10 	call	0x20b0	; 0x20b0 <LCD_init>

	/*baud rate=9600bps, No parity, one stop bit, 8 data bits*/
	UART_ConfigType uart_config = { 9600, DISABLE, ONE_BIT, EIGHT_BITS };
    1114:	ce 01       	movw	r24, r28
    1116:	85 5b       	subi	r24, 0xB5	; 181
    1118:	9f 4f       	sbci	r25, 0xFF	; 255
    111a:	68 96       	adiw	r28, 0x18	; 24
    111c:	9f af       	std	Y+63, r25	; 0x3f
    111e:	8e af       	std	Y+62, r24	; 0x3e
    1120:	68 97       	sbiw	r28, 0x18	; 24
    1122:	88 e3       	ldi	r24, 0x38	; 56
    1124:	91 e0       	ldi	r25, 0x01	; 1
    1126:	6a 96       	adiw	r28, 0x1a	; 26
    1128:	9f af       	std	Y+63, r25	; 0x3f
    112a:	8e af       	std	Y+62, r24	; 0x3e
    112c:	6a 97       	sbiw	r28, 0x1a	; 26
    112e:	97 e0       	ldi	r25, 0x07	; 7
    1130:	6b 96       	adiw	r28, 0x1b	; 27
    1132:	9f af       	std	Y+63, r25	; 0x3f
    1134:	6b 97       	sbiw	r28, 0x1b	; 27
    1136:	6a 96       	adiw	r28, 0x1a	; 26
    1138:	ee ad       	ldd	r30, Y+62	; 0x3e
    113a:	ff ad       	ldd	r31, Y+63	; 0x3f
    113c:	6a 97       	sbiw	r28, 0x1a	; 26
    113e:	00 80       	ld	r0, Z
    1140:	6a 96       	adiw	r28, 0x1a	; 26
    1142:	8e ad       	ldd	r24, Y+62	; 0x3e
    1144:	9f ad       	ldd	r25, Y+63	; 0x3f
    1146:	6a 97       	sbiw	r28, 0x1a	; 26
    1148:	01 96       	adiw	r24, 0x01	; 1
    114a:	6a 96       	adiw	r28, 0x1a	; 26
    114c:	9f af       	std	Y+63, r25	; 0x3f
    114e:	8e af       	std	Y+62, r24	; 0x3e
    1150:	6a 97       	sbiw	r28, 0x1a	; 26
    1152:	68 96       	adiw	r28, 0x18	; 24
    1154:	ee ad       	ldd	r30, Y+62	; 0x3e
    1156:	ff ad       	ldd	r31, Y+63	; 0x3f
    1158:	68 97       	sbiw	r28, 0x18	; 24
    115a:	00 82       	st	Z, r0
    115c:	68 96       	adiw	r28, 0x18	; 24
    115e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1160:	9f ad       	ldd	r25, Y+63	; 0x3f
    1162:	68 97       	sbiw	r28, 0x18	; 24
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	68 96       	adiw	r28, 0x18	; 24
    1168:	9f af       	std	Y+63, r25	; 0x3f
    116a:	8e af       	std	Y+62, r24	; 0x3e
    116c:	68 97       	sbiw	r28, 0x18	; 24
    116e:	6b 96       	adiw	r28, 0x1b	; 27
    1170:	9f ad       	ldd	r25, Y+63	; 0x3f
    1172:	6b 97       	sbiw	r28, 0x1b	; 27
    1174:	91 50       	subi	r25, 0x01	; 1
    1176:	6b 96       	adiw	r28, 0x1b	; 27
    1178:	9f af       	std	Y+63, r25	; 0x3f
    117a:	6b 97       	sbiw	r28, 0x1b	; 27
    117c:	6b 96       	adiw	r28, 0x1b	; 27
    117e:	ef ad       	ldd	r30, Y+63	; 0x3f
    1180:	6b 97       	sbiw	r28, 0x1b	; 27
    1182:	ee 23       	and	r30, r30
    1184:	c1 f6       	brne	.-80     	; 0x1136 <main+0x56>

	/* Initialize UART driver */
	UART_init(&uart_config);
    1186:	ce 01       	movw	r24, r28
    1188:	85 5b       	subi	r24, 0xB5	; 181
    118a:	9f 4f       	sbci	r25, 0xFF	; 255
    118c:	0e 94 18 16 	call	0x2c30	; 0x2c30 <UART_init>

	/* timer0 Normal mode, prescaler=1024, initial value=0 */
	Timer0_ConfigType timer0_config = { NORMAL_MODE, FCPU_1024, 0, 0 };
    1190:	fe 01       	movw	r30, r28
    1192:	ee 5a       	subi	r30, 0xAE	; 174
    1194:	ff 4f       	sbci	r31, 0xFF	; 255
    1196:	10 82       	st	Z, r1
    1198:	fe 01       	movw	r30, r28
    119a:	ee 5a       	subi	r30, 0xAE	; 174
    119c:	ff 4f       	sbci	r31, 0xFF	; 255
    119e:	85 e0       	ldi	r24, 0x05	; 5
    11a0:	81 83       	std	Z+1, r24	; 0x01
    11a2:	fe 01       	movw	r30, r28
    11a4:	ee 5a       	subi	r30, 0xAE	; 174
    11a6:	ff 4f       	sbci	r31, 0xFF	; 255
    11a8:	12 82       	std	Z+2, r1	; 0x02
    11aa:	fe 01       	movw	r30, r28
    11ac:	ee 5a       	subi	r30, 0xAE	; 174
    11ae:	ff 4f       	sbci	r31, 0xFF	; 255
    11b0:	13 82       	std	Z+3, r1	; 0x03
	Timer0_setCallBack(timer0_count1);
    11b2:	83 ea       	ldi	r24, 0xA3	; 163
    11b4:	95 e0       	ldi	r25, 0x05	; 5
    11b6:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <Timer0_setCallBack>

	/* create new password */
	newPassword(matched_flag, new_password, new_password_repeated);
    11ba:	9e 01       	movw	r18, r28
    11bc:	29 5c       	subi	r18, 0xC9	; 201
    11be:	3f 4f       	sbci	r19, 0xFF	; 255
    11c0:	ae 01       	movw	r20, r28
    11c2:	44 5c       	subi	r20, 0xC4	; 196
    11c4:	5f 4f       	sbci	r21, 0xFF	; 255
    11c6:	8e a9       	ldd	r24, Y+54	; 0x36
    11c8:	b9 01       	movw	r22, r18
    11ca:	0e 94 05 07 	call	0xe0a	; 0xe0a <newPassword>
	matched_flag = 0;
    11ce:	1e aa       	std	Y+54, r1	; 0x36

	/* recieve password from eeprom interfaced with MC2  */
	UART_sendByte(MC_READY);
    11d0:	8f ef       	ldi	r24, 0xFF	; 255
    11d2:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <UART_sendByte>
	for (int i = 0; i < 5; i++) {
    11d6:	1a aa       	std	Y+50, r1	; 0x32
    11d8:	19 aa       	std	Y+49, r1	; 0x31
    11da:	11 c0       	rjmp	.+34     	; 0x11fe <main+0x11e>
		eeprom_password[i] = UART_recieveByte();
    11dc:	09 a9       	ldd	r16, Y+49	; 0x31
    11de:	1a a9       	ldd	r17, Y+50	; 0x32
    11e0:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <UART_recieveByte>
    11e4:	28 2f       	mov	r18, r24
    11e6:	ce 01       	movw	r24, r28
    11e8:	8f 5b       	subi	r24, 0xBF	; 191
    11ea:	9f 4f       	sbci	r25, 0xFF	; 255
    11ec:	fc 01       	movw	r30, r24
    11ee:	e0 0f       	add	r30, r16
    11f0:	f1 1f       	adc	r31, r17
    11f2:	20 83       	st	Z, r18
	newPassword(matched_flag, new_password, new_password_repeated);
	matched_flag = 0;

	/* recieve password from eeprom interfaced with MC2  */
	UART_sendByte(MC_READY);
	for (int i = 0; i < 5; i++) {
    11f4:	89 a9       	ldd	r24, Y+49	; 0x31
    11f6:	9a a9       	ldd	r25, Y+50	; 0x32
    11f8:	01 96       	adiw	r24, 0x01	; 1
    11fa:	9a ab       	std	Y+50, r25	; 0x32
    11fc:	89 ab       	std	Y+49, r24	; 0x31
    11fe:	89 a9       	ldd	r24, Y+49	; 0x31
    1200:	9a a9       	ldd	r25, Y+50	; 0x32
    1202:	85 30       	cpi	r24, 0x05	; 5
    1204:	91 05       	cpc	r25, r1
    1206:	54 f3       	brlt	.-44     	; 0x11dc <main+0xfc>
		eeprom_password[i] = UART_recieveByte();
	}

	while (1) {

		LCD_displayString("to change password:-");
    1208:	8b e9       	ldi	r24, 0x9B	; 155
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_displayString>
		LCD_moveCursor(1, 0);
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	60 e0       	ldi	r22, 0x00	; 0
    1214:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_moveCursor>
		LCD_displayString("to open the door:+");
    1218:	80 eb       	ldi	r24, 0xB0	; 176
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_displayString>

		if (KEYPAD_getPressedKey() == '-') {
    1220:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <KEYPAD_getPressedKey>
    1224:	8d 32       	cpi	r24, 0x2D	; 45
    1226:	09 f0       	breq	.+2      	; 0x122a <main+0x14a>
    1228:	99 c1       	rjmp	.+818    	; 0x155c <main+0x47c>
    122a:	8d c1       	rjmp	.+794    	; 0x1546 <main+0x466>
			while ((error_flag < 3) && (correct_flag == 0)) /* we can enter wrong password 3 times only */
			{
				LCD_clearScreen();
    122c:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <LCD_clearScreen>
				LCD_displayString("enter old password:");
    1230:	83 ec       	ldi	r24, 0xC3	; 195
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_displayString>
				LCD_moveCursor(1, 0);
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_moveCursor>
				Password(old_password);
    1240:	ce 01       	movw	r24, r28
    1242:	8a 5b       	subi	r24, 0xBA	; 186
    1244:	9f 4f       	sbci	r25, 0xFF	; 255
    1246:	0e 94 bd 05 	call	0xb7a	; 0xb7a <Password>
				if ((KEYPAD_getPressedKey()) == 13) {
    124a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <KEYPAD_getPressedKey>
    124e:	8d 30       	cpi	r24, 0x0D	; 13
    1250:	09 f0       	breq	.+2      	; 0x1254 <main+0x174>
    1252:	79 c1       	rjmp	.+754    	; 0x1546 <main+0x466>
					for (int i = 0; i < 5; i++) {
    1254:	18 aa       	std	Y+48, r1	; 0x30
    1256:	1f a6       	std	Y+47, r1	; 0x2f
    1258:	1e c0       	rjmp	.+60     	; 0x1296 <main+0x1b6>
						if (old_password[i] == eeprom_password[i]) {
    125a:	2f a5       	ldd	r18, Y+47	; 0x2f
    125c:	38 a9       	ldd	r19, Y+48	; 0x30
    125e:	ce 01       	movw	r24, r28
    1260:	8a 5b       	subi	r24, 0xBA	; 186
    1262:	9f 4f       	sbci	r25, 0xFF	; 255
    1264:	fc 01       	movw	r30, r24
    1266:	e2 0f       	add	r30, r18
    1268:	f3 1f       	adc	r31, r19
    126a:	40 81       	ld	r20, Z
    126c:	2f a5       	ldd	r18, Y+47	; 0x2f
    126e:	38 a9       	ldd	r19, Y+48	; 0x30
    1270:	ce 01       	movw	r24, r28
    1272:	8f 5b       	subi	r24, 0xBF	; 191
    1274:	9f 4f       	sbci	r25, 0xFF	; 255
    1276:	fc 01       	movw	r30, r24
    1278:	e2 0f       	add	r30, r18
    127a:	f3 1f       	adc	r31, r19
    127c:	80 81       	ld	r24, Z
    127e:	48 17       	cp	r20, r24
    1280:	39 f4       	brne	.+14     	; 0x1290 <main+0x1b0>
							matched_flag2 = 0;
    1282:	1d aa       	std	Y+53, r1	; 0x35
				LCD_clearScreen();
				LCD_displayString("enter old password:");
				LCD_moveCursor(1, 0);
				Password(old_password);
				if ((KEYPAD_getPressedKey()) == 13) {
					for (int i = 0; i < 5; i++) {
    1284:	8f a5       	ldd	r24, Y+47	; 0x2f
    1286:	98 a9       	ldd	r25, Y+48	; 0x30
    1288:	01 96       	adiw	r24, 0x01	; 1
    128a:	98 ab       	std	Y+48, r25	; 0x30
    128c:	8f a7       	std	Y+47, r24	; 0x2f
    128e:	03 c0       	rjmp	.+6      	; 0x1296 <main+0x1b6>
						if (old_password[i] == eeprom_password[i]) {
							matched_flag2 = 0;
						} else {
							matched_flag2 = 1;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	8d ab       	std	Y+53, r24	; 0x35
    1294:	05 c0       	rjmp	.+10     	; 0x12a0 <main+0x1c0>
				LCD_clearScreen();
				LCD_displayString("enter old password:");
				LCD_moveCursor(1, 0);
				Password(old_password);
				if ((KEYPAD_getPressedKey()) == 13) {
					for (int i = 0; i < 5; i++) {
    1296:	8f a5       	ldd	r24, Y+47	; 0x2f
    1298:	98 a9       	ldd	r25, Y+48	; 0x30
    129a:	85 30       	cpi	r24, 0x05	; 5
    129c:	91 05       	cpc	r25, r1
    129e:	ec f2       	brlt	.-70     	; 0x125a <main+0x17a>
						} else {
							matched_flag2 = 1;
							break;
						}
					}
					if (matched_flag2 == 0) {
    12a0:	8d a9       	ldd	r24, Y+53	; 0x35
    12a2:	88 23       	and	r24, r24
    12a4:	09 f0       	breq	.+2      	; 0x12a8 <main+0x1c8>
    12a6:	a4 c0       	rjmp	.+328    	; 0x13f0 <main+0x310>
						LCD_clearScreen();
    12a8:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <LCD_clearScreen>
						LCD_displayString("correct password");
    12ac:	87 ed       	ldi	r24, 0xD7	; 215
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_displayString>
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	a8 ec       	ldi	r26, 0xC8	; 200
    12ba:	b3 e4       	ldi	r27, 0x43	; 67
    12bc:	8f a3       	std	Y+39, r24	; 0x27
    12be:	98 a7       	std	Y+40, r25	; 0x28
    12c0:	a9 a7       	std	Y+41, r26	; 0x29
    12c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c4:	6f a1       	ldd	r22, Y+39	; 0x27
    12c6:	78 a5       	ldd	r23, Y+40	; 0x28
    12c8:	89 a5       	ldd	r24, Y+41	; 0x29
    12ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	4a ef       	ldi	r20, 0xFA	; 250
    12d2:	54 e4       	ldi	r21, 0x44	; 68
    12d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	8b a3       	std	Y+35, r24	; 0x23
    12de:	9c a3       	std	Y+36, r25	; 0x24
    12e0:	ad a3       	std	Y+37, r26	; 0x25
    12e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12e4:	6b a1       	ldd	r22, Y+35	; 0x23
    12e6:	7c a1       	ldd	r23, Y+36	; 0x24
    12e8:	8d a1       	ldd	r24, Y+37	; 0x25
    12ea:	9e a1       	ldd	r25, Y+38	; 0x26
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e8       	ldi	r20, 0x80	; 128
    12f2:	5f e3       	ldi	r21, 0x3F	; 63
    12f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12f8:	88 23       	and	r24, r24
    12fa:	2c f4       	brge	.+10     	; 0x1306 <main+0x226>
		__ticks = 1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	9a a3       	std	Y+34, r25	; 0x22
    1302:	89 a3       	std	Y+33, r24	; 0x21
    1304:	3f c0       	rjmp	.+126    	; 0x1384 <main+0x2a4>
	else if (__tmp > 65535)
    1306:	6b a1       	ldd	r22, Y+35	; 0x23
    1308:	7c a1       	ldd	r23, Y+36	; 0x24
    130a:	8d a1       	ldd	r24, Y+37	; 0x25
    130c:	9e a1       	ldd	r25, Y+38	; 0x26
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	3f ef       	ldi	r19, 0xFF	; 255
    1312:	4f e7       	ldi	r20, 0x7F	; 127
    1314:	57 e4       	ldi	r21, 0x47	; 71
    1316:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    131a:	18 16       	cp	r1, r24
    131c:	4c f5       	brge	.+82     	; 0x1370 <main+0x290>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    131e:	6f a1       	ldd	r22, Y+39	; 0x27
    1320:	78 a5       	ldd	r23, Y+40	; 0x28
    1322:	89 a5       	ldd	r24, Y+41	; 0x29
    1324:	9a a5       	ldd	r25, Y+42	; 0x2a
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e2       	ldi	r20, 0x20	; 32
    132c:	51 e4       	ldi	r21, 0x41	; 65
    132e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	bc 01       	movw	r22, r24
    1338:	cd 01       	movw	r24, r26
    133a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	9a a3       	std	Y+34, r25	; 0x22
    1344:	89 a3       	std	Y+33, r24	; 0x21
    1346:	0f c0       	rjmp	.+30     	; 0x1366 <main+0x286>
    1348:	88 ec       	ldi	r24, 0xC8	; 200
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	98 a3       	std	Y+32, r25	; 0x20
    134e:	8f 8f       	std	Y+31, r24	; 0x1f
    1350:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1352:	98 a1       	ldd	r25, Y+32	; 0x20
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	f1 f7       	brne	.-4      	; 0x1354 <main+0x274>
    1358:	98 a3       	std	Y+32, r25	; 0x20
    135a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135c:	89 a1       	ldd	r24, Y+33	; 0x21
    135e:	9a a1       	ldd	r25, Y+34	; 0x22
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	9a a3       	std	Y+34, r25	; 0x22
    1364:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1366:	89 a1       	ldd	r24, Y+33	; 0x21
    1368:	9a a1       	ldd	r25, Y+34	; 0x22
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	69 f7       	brne	.-38     	; 0x1348 <main+0x268>
    136e:	14 c0       	rjmp	.+40     	; 0x1398 <main+0x2b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1370:	6b a1       	ldd	r22, Y+35	; 0x23
    1372:	7c a1       	ldd	r23, Y+36	; 0x24
    1374:	8d a1       	ldd	r24, Y+37	; 0x25
    1376:	9e a1       	ldd	r25, Y+38	; 0x26
    1378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	9a a3       	std	Y+34, r25	; 0x22
    1382:	89 a3       	std	Y+33, r24	; 0x21
    1384:	89 a1       	ldd	r24, Y+33	; 0x21
    1386:	9a a1       	ldd	r25, Y+34	; 0x22
    1388:	9e 8f       	std	Y+30, r25	; 0x1e
    138a:	8d 8f       	std	Y+29, r24	; 0x1d
    138c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    138e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1390:	01 97       	sbiw	r24, 0x01	; 1
    1392:	f1 f7       	brne	.-4      	; 0x1390 <main+0x2b0>
    1394:	9e 8f       	std	Y+30, r25	; 0x1e
    1396:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(400);
						LCD_clearScreen();
    1398:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <LCD_clearScreen>
						newPassword(matched_flag, new_password,new_password_repeated);
    139c:	9e 01       	movw	r18, r28
    139e:	29 5c       	subi	r18, 0xC9	; 201
    13a0:	3f 4f       	sbci	r19, 0xFF	; 255
    13a2:	ae 01       	movw	r20, r28
    13a4:	44 5c       	subi	r20, 0xC4	; 196
    13a6:	5f 4f       	sbci	r21, 0xFF	; 255
    13a8:	8e a9       	ldd	r24, Y+54	; 0x36
    13aa:	b9 01       	movw	r22, r18
    13ac:	0e 94 05 07 	call	0xe0a	; 0xe0a <newPassword>
						matched_flag = 0;
    13b0:	1e aa       	std	Y+54, r1	; 0x36
						UART_sendByte(MC_READY);
    13b2:	8f ef       	ldi	r24, 0xFF	; 255
    13b4:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <UART_sendByte>
						for (int i = 0; i < 5; i++) {
    13b8:	1e a6       	std	Y+46, r1	; 0x2e
    13ba:	1d a6       	std	Y+45, r1	; 0x2d
    13bc:	11 c0       	rjmp	.+34     	; 0x13e0 <main+0x300>
							eeprom_password[i] = UART_recieveByte();
    13be:	0d a5       	ldd	r16, Y+45	; 0x2d
    13c0:	1e a5       	ldd	r17, Y+46	; 0x2e
    13c2:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <UART_recieveByte>
    13c6:	28 2f       	mov	r18, r24
    13c8:	ce 01       	movw	r24, r28
    13ca:	8f 5b       	subi	r24, 0xBF	; 191
    13cc:	9f 4f       	sbci	r25, 0xFF	; 255
    13ce:	fc 01       	movw	r30, r24
    13d0:	e0 0f       	add	r30, r16
    13d2:	f1 1f       	adc	r31, r17
    13d4:	20 83       	st	Z, r18
						_delay_ms(400);
						LCD_clearScreen();
						newPassword(matched_flag, new_password,new_password_repeated);
						matched_flag = 0;
						UART_sendByte(MC_READY);
						for (int i = 0; i < 5; i++) {
    13d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    13d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	9e a7       	std	Y+46, r25	; 0x2e
    13de:	8d a7       	std	Y+45, r24	; 0x2d
    13e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    13e2:	9e a5       	ldd	r25, Y+46	; 0x2e
    13e4:	85 30       	cpi	r24, 0x05	; 5
    13e6:	91 05       	cpc	r25, r1
    13e8:	54 f3       	brlt	.-44     	; 0x13be <main+0x2de>
							eeprom_password[i] = UART_recieveByte();
						}
						correct_flag = 1;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	8b ab       	std	Y+51, r24	; 0x33
    13ee:	ab c0       	rjmp	.+342    	; 0x1546 <main+0x466>
					} else {
						LCD_clearScreen();
    13f0:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <LCD_clearScreen>
						LCD_displayString("wrong password");
    13f4:	88 ee       	ldi	r24, 0xE8	; 232
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_displayString>
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	a8 ec       	ldi	r26, 0xC8	; 200
    1402:	b3 e4       	ldi	r27, 0x43	; 67
    1404:	89 8f       	std	Y+25, r24	; 0x19
    1406:	9a 8f       	std	Y+26, r25	; 0x1a
    1408:	ab 8f       	std	Y+27, r26	; 0x1b
    140a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    140c:	69 8d       	ldd	r22, Y+25	; 0x19
    140e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1410:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1412:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	4a ef       	ldi	r20, 0xFA	; 250
    141a:	54 e4       	ldi	r21, 0x44	; 68
    141c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	8d 8b       	std	Y+21, r24	; 0x15
    1426:	9e 8b       	std	Y+22, r25	; 0x16
    1428:	af 8b       	std	Y+23, r26	; 0x17
    142a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    142c:	6d 89       	ldd	r22, Y+21	; 0x15
    142e:	7e 89       	ldd	r23, Y+22	; 0x16
    1430:	8f 89       	ldd	r24, Y+23	; 0x17
    1432:	98 8d       	ldd	r25, Y+24	; 0x18
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e8       	ldi	r20, 0x80	; 128
    143a:	5f e3       	ldi	r21, 0x3F	; 63
    143c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1440:	88 23       	and	r24, r24
    1442:	2c f4       	brge	.+10     	; 0x144e <main+0x36e>
		__ticks = 1;
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	9c 8b       	std	Y+20, r25	; 0x14
    144a:	8b 8b       	std	Y+19, r24	; 0x13
    144c:	3f c0       	rjmp	.+126    	; 0x14cc <main+0x3ec>
	else if (__tmp > 65535)
    144e:	6d 89       	ldd	r22, Y+21	; 0x15
    1450:	7e 89       	ldd	r23, Y+22	; 0x16
    1452:	8f 89       	ldd	r24, Y+23	; 0x17
    1454:	98 8d       	ldd	r25, Y+24	; 0x18
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	3f ef       	ldi	r19, 0xFF	; 255
    145a:	4f e7       	ldi	r20, 0x7F	; 127
    145c:	57 e4       	ldi	r21, 0x47	; 71
    145e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1462:	18 16       	cp	r1, r24
    1464:	4c f5       	brge	.+82     	; 0x14b8 <main+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1466:	69 8d       	ldd	r22, Y+25	; 0x19
    1468:	7a 8d       	ldd	r23, Y+26	; 0x1a
    146a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    146c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 e2       	ldi	r20, 0x20	; 32
    1474:	51 e4       	ldi	r21, 0x41	; 65
    1476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	bc 01       	movw	r22, r24
    1480:	cd 01       	movw	r24, r26
    1482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	9c 8b       	std	Y+20, r25	; 0x14
    148c:	8b 8b       	std	Y+19, r24	; 0x13
    148e:	0f c0       	rjmp	.+30     	; 0x14ae <main+0x3ce>
    1490:	88 ec       	ldi	r24, 0xC8	; 200
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	9a 8b       	std	Y+18, r25	; 0x12
    1496:	89 8b       	std	Y+17, r24	; 0x11
    1498:	89 89       	ldd	r24, Y+17	; 0x11
    149a:	9a 89       	ldd	r25, Y+18	; 0x12
    149c:	01 97       	sbiw	r24, 0x01	; 1
    149e:	f1 f7       	brne	.-4      	; 0x149c <main+0x3bc>
    14a0:	9a 8b       	std	Y+18, r25	; 0x12
    14a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a4:	8b 89       	ldd	r24, Y+19	; 0x13
    14a6:	9c 89       	ldd	r25, Y+20	; 0x14
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	9c 8b       	std	Y+20, r25	; 0x14
    14ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ae:	8b 89       	ldd	r24, Y+19	; 0x13
    14b0:	9c 89       	ldd	r25, Y+20	; 0x14
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	69 f7       	brne	.-38     	; 0x1490 <main+0x3b0>
    14b6:	14 c0       	rjmp	.+40     	; 0x14e0 <main+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b8:	6d 89       	ldd	r22, Y+21	; 0x15
    14ba:	7e 89       	ldd	r23, Y+22	; 0x16
    14bc:	8f 89       	ldd	r24, Y+23	; 0x17
    14be:	98 8d       	ldd	r25, Y+24	; 0x18
    14c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	9c 8b       	std	Y+20, r25	; 0x14
    14ca:	8b 8b       	std	Y+19, r24	; 0x13
    14cc:	8b 89       	ldd	r24, Y+19	; 0x13
    14ce:	9c 89       	ldd	r25, Y+20	; 0x14
    14d0:	98 8b       	std	Y+16, r25	; 0x10
    14d2:	8f 87       	std	Y+15, r24	; 0x0f
    14d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    14d6:	98 89       	ldd	r25, Y+16	; 0x10
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	f1 f7       	brne	.-4      	; 0x14d8 <main+0x3f8>
    14dc:	98 8b       	std	Y+16, r25	; 0x10
    14de:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(400);
						error_flag++;
    14e0:	8c a9       	ldd	r24, Y+52	; 0x34
    14e2:	8f 5f       	subi	r24, 0xFF	; 255
    14e4:	8c ab       	std	Y+52, r24	; 0x34
						if (error_flag == 3) {
    14e6:	8c a9       	ldd	r24, Y+52	; 0x34
    14e8:	83 30       	cpi	r24, 0x03	; 3
    14ea:	69 f5       	brne	.+90     	; 0x1546 <main+0x466>
							UART_sendByte(BUZZER_ON);
    14ec:	86 ef       	ldi	r24, 0xF6	; 246
    14ee:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <UART_sendByte>
							LCD_clearScreen();
    14f2:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <LCD_clearScreen>
							LCD_displayString("!!!LOCKED!!!");
    14f6:	87 ef       	ldi	r24, 0xF7	; 247
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_displayString>

							Timer0_Init(&timer0_config);
    14fe:	ce 01       	movw	r24, r28
    1500:	8e 5a       	subi	r24, 0xAE	; 174
    1502:	9f 4f       	sbci	r25, 0xFF	; 255
    1504:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <Timer0_Init>
							while(count1 != 1832){}; //1min
    1508:	80 91 40 01 	lds	r24, 0x0140
    150c:	90 91 41 01 	lds	r25, 0x0141
    1510:	a0 91 42 01 	lds	r26, 0x0142
    1514:	b0 91 43 01 	lds	r27, 0x0143
    1518:	88 32       	cpi	r24, 0x28	; 40
    151a:	f7 e0       	ldi	r31, 0x07	; 7
    151c:	9f 07       	cpc	r25, r31
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	af 07       	cpc	r26, r31
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	bf 07       	cpc	r27, r31
    1526:	81 f7       	brne	.-32     	; 0x1508 <main+0x428>
							count1=0;
    1528:	10 92 40 01 	sts	0x0140, r1
    152c:	10 92 41 01 	sts	0x0141, r1
    1530:	10 92 42 01 	sts	0x0142, r1
    1534:	10 92 43 01 	sts	0x0143, r1
							Timer0_DeInit();
    1538:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <Timer0_DeInit>

							LCD_clearScreen();
    153c:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <LCD_clearScreen>
							UART_sendByte(BUZZER_OFF);
    1540:	87 ef       	ldi	r24, 0xF7	; 247
    1542:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <UART_sendByte>
		LCD_displayString("to change password:-");
		LCD_moveCursor(1, 0);
		LCD_displayString("to open the door:+");

		if (KEYPAD_getPressedKey() == '-') {
			while ((error_flag < 3) && (correct_flag == 0)) /* we can enter wrong password 3 times only */
    1546:	8c a9       	ldd	r24, Y+52	; 0x34
    1548:	83 30       	cpi	r24, 0x03	; 3
    154a:	20 f4       	brcc	.+8      	; 0x1554 <main+0x474>
    154c:	8b a9       	ldd	r24, Y+51	; 0x33
    154e:	88 23       	and	r24, r24
    1550:	09 f4       	brne	.+2      	; 0x1554 <main+0x474>
    1552:	6c ce       	rjmp	.-808    	; 0x122c <main+0x14c>

					}

				}
			}
			matched_flag2 = 0;
    1554:	1d aa       	std	Y+53, r1	; 0x35
			error_flag = 0;
    1556:	1c aa       	std	Y+52, r1	; 0x34
			correct_flag = 0;
    1558:	1b aa       	std	Y+51, r1	; 0x33
    155a:	56 ce       	rjmp	.-852    	; 0x1208 <main+0x128>
		} else if (KEYPAD_getPressedKey() == '+') {
    155c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <KEYPAD_getPressedKey>
    1560:	8b 32       	cpi	r24, 0x2B	; 43
    1562:	09 f0       	breq	.+2      	; 0x1566 <main+0x486>
    1564:	51 ce       	rjmp	.-862    	; 0x1208 <main+0x128>
    1566:	63 c1       	rjmp	.+710    	; 0x182e <main+0x74e>

			while ((error_flag < 3) && (correct_flag == 0)) {
				LCD_clearScreen();
    1568:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <LCD_clearScreen>
				LCD_displayString("old password :");
    156c:	84 e0       	ldi	r24, 0x04	; 4
    156e:	91 e0       	ldi	r25, 0x01	; 1
    1570:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_displayString>
				LCD_moveCursor(1, 0);
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_moveCursor>
				Password(old_password);
    157c:	ce 01       	movw	r24, r28
    157e:	8a 5b       	subi	r24, 0xBA	; 186
    1580:	9f 4f       	sbci	r25, 0xFF	; 255
    1582:	0e 94 bd 05 	call	0xb7a	; 0xb7a <Password>
				if ((KEYPAD_getPressedKey()) == 13) {
    1586:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <KEYPAD_getPressedKey>
    158a:	8d 30       	cpi	r24, 0x0D	; 13
    158c:	09 f0       	breq	.+2      	; 0x1590 <main+0x4b0>
    158e:	4f c1       	rjmp	.+670    	; 0x182e <main+0x74e>
					for (int i = 0; i < 5; i++) {
    1590:	1c a6       	std	Y+44, r1	; 0x2c
    1592:	1b a6       	std	Y+43, r1	; 0x2b
    1594:	1e c0       	rjmp	.+60     	; 0x15d2 <main+0x4f2>
						if (old_password[i] == eeprom_password[i]) {
    1596:	2b a5       	ldd	r18, Y+43	; 0x2b
    1598:	3c a5       	ldd	r19, Y+44	; 0x2c
    159a:	ce 01       	movw	r24, r28
    159c:	8a 5b       	subi	r24, 0xBA	; 186
    159e:	9f 4f       	sbci	r25, 0xFF	; 255
    15a0:	fc 01       	movw	r30, r24
    15a2:	e2 0f       	add	r30, r18
    15a4:	f3 1f       	adc	r31, r19
    15a6:	40 81       	ld	r20, Z
    15a8:	2b a5       	ldd	r18, Y+43	; 0x2b
    15aa:	3c a5       	ldd	r19, Y+44	; 0x2c
    15ac:	ce 01       	movw	r24, r28
    15ae:	8f 5b       	subi	r24, 0xBF	; 191
    15b0:	9f 4f       	sbci	r25, 0xFF	; 255
    15b2:	fc 01       	movw	r30, r24
    15b4:	e2 0f       	add	r30, r18
    15b6:	f3 1f       	adc	r31, r19
    15b8:	80 81       	ld	r24, Z
    15ba:	48 17       	cp	r20, r24
    15bc:	39 f4       	brne	.+14     	; 0x15cc <main+0x4ec>
							matched_flag2 = 0;
    15be:	1d aa       	std	Y+53, r1	; 0x35
				LCD_clearScreen();
				LCD_displayString("old password :");
				LCD_moveCursor(1, 0);
				Password(old_password);
				if ((KEYPAD_getPressedKey()) == 13) {
					for (int i = 0; i < 5; i++) {
    15c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    15c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    15c4:	01 96       	adiw	r24, 0x01	; 1
    15c6:	9c a7       	std	Y+44, r25	; 0x2c
    15c8:	8b a7       	std	Y+43, r24	; 0x2b
    15ca:	03 c0       	rjmp	.+6      	; 0x15d2 <main+0x4f2>
						if (old_password[i] == eeprom_password[i]) {
							matched_flag2 = 0;
						} else {
							matched_flag2 = 1;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	8d ab       	std	Y+53, r24	; 0x35
    15d0:	05 c0       	rjmp	.+10     	; 0x15dc <main+0x4fc>
				LCD_clearScreen();
				LCD_displayString("old password :");
				LCD_moveCursor(1, 0);
				Password(old_password);
				if ((KEYPAD_getPressedKey()) == 13) {
					for (int i = 0; i < 5; i++) {
    15d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    15d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    15d6:	85 30       	cpi	r24, 0x05	; 5
    15d8:	91 05       	cpc	r25, r1
    15da:	ec f2       	brlt	.-70     	; 0x1596 <main+0x4b6>
						} else {
							matched_flag2 = 1;
							break;
						}
					}
					if (matched_flag2 == 0) {
    15dc:	8d a9       	ldd	r24, Y+53	; 0x35
    15de:	88 23       	and	r24, r24
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <main+0x504>
    15e2:	7a c0       	rjmp	.+244    	; 0x16d8 <main+0x5f8>
						LCD_clearScreen();
    15e4:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <LCD_clearScreen>
						LCD_displayString("Opening...");
    15e8:	83 e1       	ldi	r24, 0x13	; 19
    15ea:	91 e0       	ldi	r25, 0x01	; 1
    15ec:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_displayString>
						UART_sendByte(OPEN);
    15f0:	82 ef       	ldi	r24, 0xF2	; 242
    15f2:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <UART_sendByte>

						Timer0_Init(&timer0_config);
    15f6:	ce 01       	movw	r24, r28
    15f8:	8e 5a       	subi	r24, 0xAE	; 174
    15fa:	9f 4f       	sbci	r25, 0xFF	; 255
    15fc:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <Timer0_Init>
						while(count1 != 458){};  //15 sec
    1600:	80 91 40 01 	lds	r24, 0x0140
    1604:	90 91 41 01 	lds	r25, 0x0141
    1608:	a0 91 42 01 	lds	r26, 0x0142
    160c:	b0 91 43 01 	lds	r27, 0x0143
    1610:	8a 3c       	cpi	r24, 0xCA	; 202
    1612:	21 e0       	ldi	r18, 0x01	; 1
    1614:	92 07       	cpc	r25, r18
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	a2 07       	cpc	r26, r18
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	b2 07       	cpc	r27, r18
    161e:	81 f7       	brne	.-32     	; 0x1600 <main+0x520>
						count1=0;
    1620:	10 92 40 01 	sts	0x0140, r1
    1624:	10 92 41 01 	sts	0x0141, r1
    1628:	10 92 42 01 	sts	0x0142, r1
    162c:	10 92 43 01 	sts	0x0143, r1
						Timer0_DeInit();
    1630:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <Timer0_DeInit>

						LCD_clearScreen();
    1634:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <LCD_clearScreen>
						LCD_displayString("Opened");
    1638:	8e e1       	ldi	r24, 0x1E	; 30
    163a:	91 e0       	ldi	r25, 0x01	; 1
    163c:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_displayString>
						UART_sendByte(WAIT);
    1640:	85 ef       	ldi	r24, 0xF5	; 245
    1642:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <UART_sendByte>

						Timer0_Init(&timer0_config);
    1646:	ce 01       	movw	r24, r28
    1648:	8e 5a       	subi	r24, 0xAE	; 174
    164a:	9f 4f       	sbci	r25, 0xFF	; 255
    164c:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <Timer0_Init>
						while(count1 != 92){};  // 3 sec
    1650:	80 91 40 01 	lds	r24, 0x0140
    1654:	90 91 41 01 	lds	r25, 0x0141
    1658:	a0 91 42 01 	lds	r26, 0x0142
    165c:	b0 91 43 01 	lds	r27, 0x0143
    1660:	8c 35       	cpi	r24, 0x5C	; 92
    1662:	91 05       	cpc	r25, r1
    1664:	a1 05       	cpc	r26, r1
    1666:	b1 05       	cpc	r27, r1
    1668:	99 f7       	brne	.-26     	; 0x1650 <main+0x570>
						count1=0;
    166a:	10 92 40 01 	sts	0x0140, r1
    166e:	10 92 41 01 	sts	0x0141, r1
    1672:	10 92 42 01 	sts	0x0142, r1
    1676:	10 92 43 01 	sts	0x0143, r1
						Timer0_DeInit();
    167a:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <Timer0_DeInit>

						LCD_clearScreen();
    167e:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <LCD_clearScreen>
						LCD_displayString("Closing...");
    1682:	85 e2       	ldi	r24, 0x25	; 37
    1684:	91 e0       	ldi	r25, 0x01	; 1
    1686:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_displayString>
						UART_sendByte(CLOSE);
    168a:	83 ef       	ldi	r24, 0xF3	; 243
    168c:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <UART_sendByte>

						Timer0_Init(&timer0_config);
    1690:	ce 01       	movw	r24, r28
    1692:	8e 5a       	subi	r24, 0xAE	; 174
    1694:	9f 4f       	sbci	r25, 0xFF	; 255
    1696:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <Timer0_Init>
						while(count1 != 458){};   //15 sec
    169a:	80 91 40 01 	lds	r24, 0x0140
    169e:	90 91 41 01 	lds	r25, 0x0141
    16a2:	a0 91 42 01 	lds	r26, 0x0142
    16a6:	b0 91 43 01 	lds	r27, 0x0143
    16aa:	8a 3c       	cpi	r24, 0xCA	; 202
    16ac:	e1 e0       	ldi	r30, 0x01	; 1
    16ae:	9e 07       	cpc	r25, r30
    16b0:	e0 e0       	ldi	r30, 0x00	; 0
    16b2:	ae 07       	cpc	r26, r30
    16b4:	e0 e0       	ldi	r30, 0x00	; 0
    16b6:	be 07       	cpc	r27, r30
    16b8:	81 f7       	brne	.-32     	; 0x169a <main+0x5ba>
						count1=0;
    16ba:	10 92 40 01 	sts	0x0140, r1
    16be:	10 92 41 01 	sts	0x0141, r1
    16c2:	10 92 42 01 	sts	0x0142, r1
    16c6:	10 92 43 01 	sts	0x0143, r1
						Timer0_DeInit();
    16ca:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <Timer0_DeInit>

						LCD_clearScreen();
    16ce:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <LCD_clearScreen>
						correct_flag = 1;
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	8b ab       	std	Y+51, r24	; 0x33
    16d6:	ab c0       	rjmp	.+342    	; 0x182e <main+0x74e>
					} else {
						LCD_clearScreen();
    16d8:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <LCD_clearScreen>
						LCD_displayString("wrong password");
    16dc:	88 ee       	ldi	r24, 0xE8	; 232
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_displayString>
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	a8 ec       	ldi	r26, 0xC8	; 200
    16ea:	b3 e4       	ldi	r27, 0x43	; 67
    16ec:	8b 87       	std	Y+11, r24	; 0x0b
    16ee:	9c 87       	std	Y+12, r25	; 0x0c
    16f0:	ad 87       	std	Y+13, r26	; 0x0d
    16f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	4a ef       	ldi	r20, 0xFA	; 250
    1702:	54 e4       	ldi	r21, 0x44	; 68
    1704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	8f 83       	std	Y+7, r24	; 0x07
    170e:	98 87       	std	Y+8, r25	; 0x08
    1710:	a9 87       	std	Y+9, r26	; 0x09
    1712:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1714:	6f 81       	ldd	r22, Y+7	; 0x07
    1716:	78 85       	ldd	r23, Y+8	; 0x08
    1718:	89 85       	ldd	r24, Y+9	; 0x09
    171a:	9a 85       	ldd	r25, Y+10	; 0x0a
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e8       	ldi	r20, 0x80	; 128
    1722:	5f e3       	ldi	r21, 0x3F	; 63
    1724:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1728:	88 23       	and	r24, r24
    172a:	2c f4       	brge	.+10     	; 0x1736 <main+0x656>
		__ticks = 1;
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	9e 83       	std	Y+6, r25	; 0x06
    1732:	8d 83       	std	Y+5, r24	; 0x05
    1734:	3f c0       	rjmp	.+126    	; 0x17b4 <main+0x6d4>
	else if (__tmp > 65535)
    1736:	6f 81       	ldd	r22, Y+7	; 0x07
    1738:	78 85       	ldd	r23, Y+8	; 0x08
    173a:	89 85       	ldd	r24, Y+9	; 0x09
    173c:	9a 85       	ldd	r25, Y+10	; 0x0a
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	3f ef       	ldi	r19, 0xFF	; 255
    1742:	4f e7       	ldi	r20, 0x7F	; 127
    1744:	57 e4       	ldi	r21, 0x47	; 71
    1746:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    174a:	18 16       	cp	r1, r24
    174c:	4c f5       	brge	.+82     	; 0x17a0 <main+0x6c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    174e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1750:	7c 85       	ldd	r23, Y+12	; 0x0c
    1752:	8d 85       	ldd	r24, Y+13	; 0x0d
    1754:	9e 85       	ldd	r25, Y+14	; 0x0e
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e2       	ldi	r20, 0x20	; 32
    175c:	51 e4       	ldi	r21, 0x41	; 65
    175e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	bc 01       	movw	r22, r24
    1768:	cd 01       	movw	r24, r26
    176a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	9e 83       	std	Y+6, r25	; 0x06
    1774:	8d 83       	std	Y+5, r24	; 0x05
    1776:	0f c0       	rjmp	.+30     	; 0x1796 <main+0x6b6>
    1778:	88 ec       	ldi	r24, 0xC8	; 200
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	9c 83       	std	Y+4, r25	; 0x04
    177e:	8b 83       	std	Y+3, r24	; 0x03
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	9c 81       	ldd	r25, Y+4	; 0x04
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	f1 f7       	brne	.-4      	; 0x1784 <main+0x6a4>
    1788:	9c 83       	std	Y+4, r25	; 0x04
    178a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178c:	8d 81       	ldd	r24, Y+5	; 0x05
    178e:	9e 81       	ldd	r25, Y+6	; 0x06
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	9e 83       	std	Y+6, r25	; 0x06
    1794:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1796:	8d 81       	ldd	r24, Y+5	; 0x05
    1798:	9e 81       	ldd	r25, Y+6	; 0x06
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	69 f7       	brne	.-38     	; 0x1778 <main+0x698>
    179e:	14 c0       	rjmp	.+40     	; 0x17c8 <main+0x6e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a0:	6f 81       	ldd	r22, Y+7	; 0x07
    17a2:	78 85       	ldd	r23, Y+8	; 0x08
    17a4:	89 85       	ldd	r24, Y+9	; 0x09
    17a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	9e 83       	std	Y+6, r25	; 0x06
    17b2:	8d 83       	std	Y+5, r24	; 0x05
    17b4:	8d 81       	ldd	r24, Y+5	; 0x05
    17b6:	9e 81       	ldd	r25, Y+6	; 0x06
    17b8:	9a 83       	std	Y+2, r25	; 0x02
    17ba:	89 83       	std	Y+1, r24	; 0x01
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	9a 81       	ldd	r25, Y+2	; 0x02
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	f1 f7       	brne	.-4      	; 0x17c0 <main+0x6e0>
    17c4:	9a 83       	std	Y+2, r25	; 0x02
    17c6:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(400);
						error_flag++;
    17c8:	8c a9       	ldd	r24, Y+52	; 0x34
    17ca:	8f 5f       	subi	r24, 0xFF	; 255
    17cc:	8c ab       	std	Y+52, r24	; 0x34
						if (error_flag == 3) {
    17ce:	8c a9       	ldd	r24, Y+52	; 0x34
    17d0:	83 30       	cpi	r24, 0x03	; 3
    17d2:	69 f5       	brne	.+90     	; 0x182e <main+0x74e>
							UART_sendByte(BUZZER_ON);
    17d4:	86 ef       	ldi	r24, 0xF6	; 246
    17d6:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <UART_sendByte>
							LCD_clearScreen();
    17da:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <LCD_clearScreen>
							LCD_displayString("!!!LOCKED!!!");
    17de:	87 ef       	ldi	r24, 0xF7	; 247
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_displayString>

							Timer0_Init(&timer0_config);
    17e6:	ce 01       	movw	r24, r28
    17e8:	8e 5a       	subi	r24, 0xAE	; 174
    17ea:	9f 4f       	sbci	r25, 0xFF	; 255
    17ec:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <Timer0_Init>
							while(count1 != 1832){}; //1min
    17f0:	80 91 40 01 	lds	r24, 0x0140
    17f4:	90 91 41 01 	lds	r25, 0x0141
    17f8:	a0 91 42 01 	lds	r26, 0x0142
    17fc:	b0 91 43 01 	lds	r27, 0x0143
    1800:	88 32       	cpi	r24, 0x28	; 40
    1802:	f7 e0       	ldi	r31, 0x07	; 7
    1804:	9f 07       	cpc	r25, r31
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	af 07       	cpc	r26, r31
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	bf 07       	cpc	r27, r31
    180e:	81 f7       	brne	.-32     	; 0x17f0 <main+0x710>
							count1=0;
    1810:	10 92 40 01 	sts	0x0140, r1
    1814:	10 92 41 01 	sts	0x0141, r1
    1818:	10 92 42 01 	sts	0x0142, r1
    181c:	10 92 43 01 	sts	0x0143, r1
							Timer0_DeInit();
    1820:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <Timer0_DeInit>

							LCD_clearScreen();
    1824:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <LCD_clearScreen>
							UART_sendByte(BUZZER_OFF);
    1828:	87 ef       	ldi	r24, 0xF7	; 247
    182a:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <UART_sendByte>
			matched_flag2 = 0;
			error_flag = 0;
			correct_flag = 0;
		} else if (KEYPAD_getPressedKey() == '+') {

			while ((error_flag < 3) && (correct_flag == 0)) {
    182e:	8c a9       	ldd	r24, Y+52	; 0x34
    1830:	83 30       	cpi	r24, 0x03	; 3
    1832:	20 f4       	brcc	.+8      	; 0x183c <main+0x75c>
    1834:	8b a9       	ldd	r24, Y+51	; 0x33
    1836:	88 23       	and	r24, r24
    1838:	09 f4       	brne	.+2      	; 0x183c <main+0x75c>
    183a:	96 ce       	rjmp	.-724    	; 0x1568 <main+0x488>
						}

					}
				}
			}
			matched_flag2 = 0;
    183c:	1d aa       	std	Y+53, r1	; 0x35
			error_flag = 0;
    183e:	1c aa       	std	Y+52, r1	; 0x34
			correct_flag = 0;
    1840:	1b aa       	std	Y+51, r1	; 0x33
    1842:	e2 cc       	rjmp	.-1596   	; 0x1208 <main+0x128>

00001844 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	00 d0       	rcall	.+0      	; 0x184a <GPIO_setupPinDirection+0x6>
    184a:	00 d0       	rcall	.+0      	; 0x184c <GPIO_setupPinDirection+0x8>
    184c:	0f 92       	push	r0
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    1852:	89 83       	std	Y+1, r24	; 0x01
    1854:	6a 83       	std	Y+2, r22	; 0x02
    1856:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	88 30       	cpi	r24, 0x08	; 8
    185c:	08 f0       	brcs	.+2      	; 0x1860 <GPIO_setupPinDirection+0x1c>
    185e:	d5 c0       	rjmp	.+426    	; 0x1a0a <GPIO_setupPinDirection+0x1c6>
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	84 30       	cpi	r24, 0x04	; 4
    1864:	08 f0       	brcs	.+2      	; 0x1868 <GPIO_setupPinDirection+0x24>
    1866:	d1 c0       	rjmp	.+418    	; 0x1a0a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	3d 83       	std	Y+5, r19	; 0x05
    1870:	2c 83       	std	Y+4, r18	; 0x04
    1872:	8c 81       	ldd	r24, Y+4	; 0x04
    1874:	9d 81       	ldd	r25, Y+5	; 0x05
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	91 05       	cpc	r25, r1
    187a:	09 f4       	brne	.+2      	; 0x187e <GPIO_setupPinDirection+0x3a>
    187c:	43 c0       	rjmp	.+134    	; 0x1904 <GPIO_setupPinDirection+0xc0>
    187e:	2c 81       	ldd	r18, Y+4	; 0x04
    1880:	3d 81       	ldd	r19, Y+5	; 0x05
    1882:	22 30       	cpi	r18, 0x02	; 2
    1884:	31 05       	cpc	r19, r1
    1886:	2c f4       	brge	.+10     	; 0x1892 <GPIO_setupPinDirection+0x4e>
    1888:	8c 81       	ldd	r24, Y+4	; 0x04
    188a:	9d 81       	ldd	r25, Y+5	; 0x05
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	71 f0       	breq	.+28     	; 0x18ac <GPIO_setupPinDirection+0x68>
    1890:	bc c0       	rjmp	.+376    	; 0x1a0a <GPIO_setupPinDirection+0x1c6>
    1892:	2c 81       	ldd	r18, Y+4	; 0x04
    1894:	3d 81       	ldd	r19, Y+5	; 0x05
    1896:	22 30       	cpi	r18, 0x02	; 2
    1898:	31 05       	cpc	r19, r1
    189a:	09 f4       	brne	.+2      	; 0x189e <GPIO_setupPinDirection+0x5a>
    189c:	5f c0       	rjmp	.+190    	; 0x195c <GPIO_setupPinDirection+0x118>
    189e:	8c 81       	ldd	r24, Y+4	; 0x04
    18a0:	9d 81       	ldd	r25, Y+5	; 0x05
    18a2:	83 30       	cpi	r24, 0x03	; 3
    18a4:	91 05       	cpc	r25, r1
    18a6:	09 f4       	brne	.+2      	; 0x18aa <GPIO_setupPinDirection+0x66>
    18a8:	85 c0       	rjmp	.+266    	; 0x19b4 <GPIO_setupPinDirection+0x170>
    18aa:	af c0       	rjmp	.+350    	; 0x1a0a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	81 30       	cpi	r24, 0x01	; 1
    18b0:	a1 f4       	brne	.+40     	; 0x18da <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    18b2:	aa e3       	ldi	r26, 0x3A	; 58
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	ea e3       	ldi	r30, 0x3A	; 58
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	48 2f       	mov	r20, r24
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	02 2e       	mov	r0, r18
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <GPIO_setupPinDirection+0x8c>
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	0a 94       	dec	r0
    18d2:	e2 f7       	brpl	.-8      	; 0x18cc <GPIO_setupPinDirection+0x88>
    18d4:	84 2b       	or	r24, r20
    18d6:	8c 93       	st	X, r24
    18d8:	98 c0       	rjmp	.+304    	; 0x1a0a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    18da:	aa e3       	ldi	r26, 0x3A	; 58
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	ea e3       	ldi	r30, 0x3A	; 58
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	48 2f       	mov	r20, r24
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	02 2e       	mov	r0, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <GPIO_setupPinDirection+0xb4>
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	0a 94       	dec	r0
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <GPIO_setupPinDirection+0xb0>
    18fc:	80 95       	com	r24
    18fe:	84 23       	and	r24, r20
    1900:	8c 93       	st	X, r24
    1902:	83 c0       	rjmp	.+262    	; 0x1a0a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	81 30       	cpi	r24, 0x01	; 1
    1908:	a1 f4       	brne	.+40     	; 0x1932 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    190a:	a7 e3       	ldi	r26, 0x37	; 55
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e7 e3       	ldi	r30, 0x37	; 55
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	48 2f       	mov	r20, r24
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	02 2e       	mov	r0, r18
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <GPIO_setupPinDirection+0xe4>
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	0a 94       	dec	r0
    192a:	e2 f7       	brpl	.-8      	; 0x1924 <GPIO_setupPinDirection+0xe0>
    192c:	84 2b       	or	r24, r20
    192e:	8c 93       	st	X, r24
    1930:	6c c0       	rjmp	.+216    	; 0x1a0a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1932:	a7 e3       	ldi	r26, 0x37	; 55
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e7 e3       	ldi	r30, 0x37	; 55
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	48 2f       	mov	r20, r24
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	02 2e       	mov	r0, r18
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <GPIO_setupPinDirection+0x10c>
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	0a 94       	dec	r0
    1952:	e2 f7       	brpl	.-8      	; 0x194c <GPIO_setupPinDirection+0x108>
    1954:	80 95       	com	r24
    1956:	84 23       	and	r24, r20
    1958:	8c 93       	st	X, r24
    195a:	57 c0       	rjmp	.+174    	; 0x1a0a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	81 30       	cpi	r24, 0x01	; 1
    1960:	a1 f4       	brne	.+40     	; 0x198a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1962:	a4 e3       	ldi	r26, 0x34	; 52
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e4 e3       	ldi	r30, 0x34	; 52
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	48 2f       	mov	r20, r24
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	02 2e       	mov	r0, r18
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <GPIO_setupPinDirection+0x13c>
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	0a 94       	dec	r0
    1982:	e2 f7       	brpl	.-8      	; 0x197c <GPIO_setupPinDirection+0x138>
    1984:	84 2b       	or	r24, r20
    1986:	8c 93       	st	X, r24
    1988:	40 c0       	rjmp	.+128    	; 0x1a0a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    198a:	a4 e3       	ldi	r26, 0x34	; 52
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e4 e3       	ldi	r30, 0x34	; 52
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	48 2f       	mov	r20, r24
    1996:	8a 81       	ldd	r24, Y+2	; 0x02
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	02 2e       	mov	r0, r18
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <GPIO_setupPinDirection+0x164>
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	0a 94       	dec	r0
    19aa:	e2 f7       	brpl	.-8      	; 0x19a4 <GPIO_setupPinDirection+0x160>
    19ac:	80 95       	com	r24
    19ae:	84 23       	and	r24, r20
    19b0:	8c 93       	st	X, r24
    19b2:	2b c0       	rjmp	.+86     	; 0x1a0a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	81 30       	cpi	r24, 0x01	; 1
    19b8:	a1 f4       	brne	.+40     	; 0x19e2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    19ba:	a1 e3       	ldi	r26, 0x31	; 49
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e1 e3       	ldi	r30, 0x31	; 49
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	48 2f       	mov	r20, r24
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	02 2e       	mov	r0, r18
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <GPIO_setupPinDirection+0x194>
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	0a 94       	dec	r0
    19da:	e2 f7       	brpl	.-8      	; 0x19d4 <GPIO_setupPinDirection+0x190>
    19dc:	84 2b       	or	r24, r20
    19de:	8c 93       	st	X, r24
    19e0:	14 c0       	rjmp	.+40     	; 0x1a0a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    19e2:	a1 e3       	ldi	r26, 0x31	; 49
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e1 e3       	ldi	r30, 0x31	; 49
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	48 2f       	mov	r20, r24
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	28 2f       	mov	r18, r24
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	02 2e       	mov	r0, r18
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <GPIO_setupPinDirection+0x1bc>
    19fc:	88 0f       	add	r24, r24
    19fe:	99 1f       	adc	r25, r25
    1a00:	0a 94       	dec	r0
    1a02:	e2 f7       	brpl	.-8      	; 0x19fc <GPIO_setupPinDirection+0x1b8>
    1a04:	80 95       	com	r24
    1a06:	84 23       	and	r24, r20
    1a08:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	cf 91       	pop	r28
    1a16:	df 91       	pop	r29
    1a18:	08 95       	ret

00001a1a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1a1a:	df 93       	push	r29
    1a1c:	cf 93       	push	r28
    1a1e:	00 d0       	rcall	.+0      	; 0x1a20 <GPIO_writePin+0x6>
    1a20:	00 d0       	rcall	.+0      	; 0x1a22 <GPIO_writePin+0x8>
    1a22:	0f 92       	push	r0
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	89 83       	std	Y+1, r24	; 0x01
    1a2a:	6a 83       	std	Y+2, r22	; 0x02
    1a2c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	88 30       	cpi	r24, 0x08	; 8
    1a32:	08 f0       	brcs	.+2      	; 0x1a36 <GPIO_writePin+0x1c>
    1a34:	d5 c0       	rjmp	.+426    	; 0x1be0 <GPIO_writePin+0x1c6>
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	84 30       	cpi	r24, 0x04	; 4
    1a3a:	08 f0       	brcs	.+2      	; 0x1a3e <GPIO_writePin+0x24>
    1a3c:	d1 c0       	rjmp	.+418    	; 0x1be0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	3d 83       	std	Y+5, r19	; 0x05
    1a46:	2c 83       	std	Y+4, r18	; 0x04
    1a48:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4c:	81 30       	cpi	r24, 0x01	; 1
    1a4e:	91 05       	cpc	r25, r1
    1a50:	09 f4       	brne	.+2      	; 0x1a54 <GPIO_writePin+0x3a>
    1a52:	43 c0       	rjmp	.+134    	; 0x1ada <GPIO_writePin+0xc0>
    1a54:	2c 81       	ldd	r18, Y+4	; 0x04
    1a56:	3d 81       	ldd	r19, Y+5	; 0x05
    1a58:	22 30       	cpi	r18, 0x02	; 2
    1a5a:	31 05       	cpc	r19, r1
    1a5c:	2c f4       	brge	.+10     	; 0x1a68 <GPIO_writePin+0x4e>
    1a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a60:	9d 81       	ldd	r25, Y+5	; 0x05
    1a62:	00 97       	sbiw	r24, 0x00	; 0
    1a64:	71 f0       	breq	.+28     	; 0x1a82 <GPIO_writePin+0x68>
    1a66:	bc c0       	rjmp	.+376    	; 0x1be0 <GPIO_writePin+0x1c6>
    1a68:	2c 81       	ldd	r18, Y+4	; 0x04
    1a6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a6c:	22 30       	cpi	r18, 0x02	; 2
    1a6e:	31 05       	cpc	r19, r1
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <GPIO_writePin+0x5a>
    1a72:	5f c0       	rjmp	.+190    	; 0x1b32 <GPIO_writePin+0x118>
    1a74:	8c 81       	ldd	r24, Y+4	; 0x04
    1a76:	9d 81       	ldd	r25, Y+5	; 0x05
    1a78:	83 30       	cpi	r24, 0x03	; 3
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <GPIO_writePin+0x66>
    1a7e:	85 c0       	rjmp	.+266    	; 0x1b8a <GPIO_writePin+0x170>
    1a80:	af c0       	rjmp	.+350    	; 0x1be0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	81 30       	cpi	r24, 0x01	; 1
    1a86:	a1 f4       	brne	.+40     	; 0x1ab0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1a88:	ab e3       	ldi	r26, 0x3B	; 59
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	eb e3       	ldi	r30, 0x3B	; 59
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	48 2f       	mov	r20, r24
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	02 2e       	mov	r0, r18
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <GPIO_writePin+0x8c>
    1aa2:	88 0f       	add	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	0a 94       	dec	r0
    1aa8:	e2 f7       	brpl	.-8      	; 0x1aa2 <GPIO_writePin+0x88>
    1aaa:	84 2b       	or	r24, r20
    1aac:	8c 93       	st	X, r24
    1aae:	98 c0       	rjmp	.+304    	; 0x1be0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1ab0:	ab e3       	ldi	r26, 0x3B	; 59
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	eb e3       	ldi	r30, 0x3B	; 59
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	48 2f       	mov	r20, r24
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	02 2e       	mov	r0, r18
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <GPIO_writePin+0xb4>
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	0a 94       	dec	r0
    1ad0:	e2 f7       	brpl	.-8      	; 0x1aca <GPIO_writePin+0xb0>
    1ad2:	80 95       	com	r24
    1ad4:	84 23       	and	r24, r20
    1ad6:	8c 93       	st	X, r24
    1ad8:	83 c0       	rjmp	.+262    	; 0x1be0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	81 30       	cpi	r24, 0x01	; 1
    1ade:	a1 f4       	brne	.+40     	; 0x1b08 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1ae0:	a8 e3       	ldi	r26, 0x38	; 56
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e8 e3       	ldi	r30, 0x38	; 56
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	48 2f       	mov	r20, r24
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	02 2e       	mov	r0, r18
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <GPIO_writePin+0xe4>
    1afa:	88 0f       	add	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	0a 94       	dec	r0
    1b00:	e2 f7       	brpl	.-8      	; 0x1afa <GPIO_writePin+0xe0>
    1b02:	84 2b       	or	r24, r20
    1b04:	8c 93       	st	X, r24
    1b06:	6c c0       	rjmp	.+216    	; 0x1be0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1b08:	a8 e3       	ldi	r26, 0x38	; 56
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e8 e3       	ldi	r30, 0x38	; 56
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	48 2f       	mov	r20, r24
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	02 2e       	mov	r0, r18
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <GPIO_writePin+0x10c>
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	0a 94       	dec	r0
    1b28:	e2 f7       	brpl	.-8      	; 0x1b22 <GPIO_writePin+0x108>
    1b2a:	80 95       	com	r24
    1b2c:	84 23       	and	r24, r20
    1b2e:	8c 93       	st	X, r24
    1b30:	57 c0       	rjmp	.+174    	; 0x1be0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	81 30       	cpi	r24, 0x01	; 1
    1b36:	a1 f4       	brne	.+40     	; 0x1b60 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1b38:	a5 e3       	ldi	r26, 0x35	; 53
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	e5 e3       	ldi	r30, 0x35	; 53
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	48 2f       	mov	r20, r24
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	28 2f       	mov	r18, r24
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	02 2e       	mov	r0, r18
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <GPIO_writePin+0x13c>
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	0a 94       	dec	r0
    1b58:	e2 f7       	brpl	.-8      	; 0x1b52 <GPIO_writePin+0x138>
    1b5a:	84 2b       	or	r24, r20
    1b5c:	8c 93       	st	X, r24
    1b5e:	40 c0       	rjmp	.+128    	; 0x1be0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1b60:	a5 e3       	ldi	r26, 0x35	; 53
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e5 e3       	ldi	r30, 0x35	; 53
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	48 2f       	mov	r20, r24
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	02 2e       	mov	r0, r18
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <GPIO_writePin+0x164>
    1b7a:	88 0f       	add	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	0a 94       	dec	r0
    1b80:	e2 f7       	brpl	.-8      	; 0x1b7a <GPIO_writePin+0x160>
    1b82:	80 95       	com	r24
    1b84:	84 23       	and	r24, r20
    1b86:	8c 93       	st	X, r24
    1b88:	2b c0       	rjmp	.+86     	; 0x1be0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	81 30       	cpi	r24, 0x01	; 1
    1b8e:	a1 f4       	brne	.+40     	; 0x1bb8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1b90:	a2 e3       	ldi	r26, 0x32	; 50
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	e2 e3       	ldi	r30, 0x32	; 50
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	48 2f       	mov	r20, r24
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	28 2f       	mov	r18, r24
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	02 2e       	mov	r0, r18
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <GPIO_writePin+0x194>
    1baa:	88 0f       	add	r24, r24
    1bac:	99 1f       	adc	r25, r25
    1bae:	0a 94       	dec	r0
    1bb0:	e2 f7       	brpl	.-8      	; 0x1baa <GPIO_writePin+0x190>
    1bb2:	84 2b       	or	r24, r20
    1bb4:	8c 93       	st	X, r24
    1bb6:	14 c0       	rjmp	.+40     	; 0x1be0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1bb8:	a2 e3       	ldi	r26, 0x32	; 50
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	e2 e3       	ldi	r30, 0x32	; 50
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	48 2f       	mov	r20, r24
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	02 2e       	mov	r0, r18
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <GPIO_writePin+0x1bc>
    1bd2:	88 0f       	add	r24, r24
    1bd4:	99 1f       	adc	r25, r25
    1bd6:	0a 94       	dec	r0
    1bd8:	e2 f7       	brpl	.-8      	; 0x1bd2 <GPIO_writePin+0x1b8>
    1bda:	80 95       	com	r24
    1bdc:	84 23       	and	r24, r20
    1bde:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	08 95       	ret

00001bf0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <GPIO_readPin+0x6>
    1bf6:	00 d0       	rcall	.+0      	; 0x1bf8 <GPIO_readPin+0x8>
    1bf8:	0f 92       	push	r0
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	8a 83       	std	Y+2, r24	; 0x02
    1c00:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1c02:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	88 30       	cpi	r24, 0x08	; 8
    1c08:	08 f0       	brcs	.+2      	; 0x1c0c <GPIO_readPin+0x1c>
    1c0a:	84 c0       	rjmp	.+264    	; 0x1d14 <GPIO_readPin+0x124>
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	84 30       	cpi	r24, 0x04	; 4
    1c10:	08 f0       	brcs	.+2      	; 0x1c14 <GPIO_readPin+0x24>
    1c12:	80 c0       	rjmp	.+256    	; 0x1d14 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	3d 83       	std	Y+5, r19	; 0x05
    1c1c:	2c 83       	std	Y+4, r18	; 0x04
    1c1e:	4c 81       	ldd	r20, Y+4	; 0x04
    1c20:	5d 81       	ldd	r21, Y+5	; 0x05
    1c22:	41 30       	cpi	r20, 0x01	; 1
    1c24:	51 05       	cpc	r21, r1
    1c26:	79 f1       	breq	.+94     	; 0x1c86 <GPIO_readPin+0x96>
    1c28:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c2c:	82 30       	cpi	r24, 0x02	; 2
    1c2e:	91 05       	cpc	r25, r1
    1c30:	34 f4       	brge	.+12     	; 0x1c3e <GPIO_readPin+0x4e>
    1c32:	2c 81       	ldd	r18, Y+4	; 0x04
    1c34:	3d 81       	ldd	r19, Y+5	; 0x05
    1c36:	21 15       	cp	r18, r1
    1c38:	31 05       	cpc	r19, r1
    1c3a:	69 f0       	breq	.+26     	; 0x1c56 <GPIO_readPin+0x66>
    1c3c:	6b c0       	rjmp	.+214    	; 0x1d14 <GPIO_readPin+0x124>
    1c3e:	4c 81       	ldd	r20, Y+4	; 0x04
    1c40:	5d 81       	ldd	r21, Y+5	; 0x05
    1c42:	42 30       	cpi	r20, 0x02	; 2
    1c44:	51 05       	cpc	r21, r1
    1c46:	b9 f1       	breq	.+110    	; 0x1cb6 <GPIO_readPin+0xc6>
    1c48:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c4c:	83 30       	cpi	r24, 0x03	; 3
    1c4e:	91 05       	cpc	r25, r1
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <GPIO_readPin+0x64>
    1c52:	49 c0       	rjmp	.+146    	; 0x1ce6 <GPIO_readPin+0xf6>
    1c54:	5f c0       	rjmp	.+190    	; 0x1d14 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1c56:	e9 e3       	ldi	r30, 0x39	; 57
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	88 2f       	mov	r24, r24
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	a9 01       	movw	r20, r18
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <GPIO_readPin+0x7e>
    1c6a:	55 95       	asr	r21
    1c6c:	47 95       	ror	r20
    1c6e:	8a 95       	dec	r24
    1c70:	e2 f7       	brpl	.-8      	; 0x1c6a <GPIO_readPin+0x7a>
    1c72:	ca 01       	movw	r24, r20
    1c74:	81 70       	andi	r24, 0x01	; 1
    1c76:	90 70       	andi	r25, 0x00	; 0
    1c78:	88 23       	and	r24, r24
    1c7a:	19 f0       	breq	.+6      	; 0x1c82 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	89 83       	std	Y+1, r24	; 0x01
    1c80:	49 c0       	rjmp	.+146    	; 0x1d14 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c82:	19 82       	std	Y+1, r1	; 0x01
    1c84:	47 c0       	rjmp	.+142    	; 0x1d14 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1c86:	e6 e3       	ldi	r30, 0x36	; 54
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	88 2f       	mov	r24, r24
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	a9 01       	movw	r20, r18
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <GPIO_readPin+0xae>
    1c9a:	55 95       	asr	r21
    1c9c:	47 95       	ror	r20
    1c9e:	8a 95       	dec	r24
    1ca0:	e2 f7       	brpl	.-8      	; 0x1c9a <GPIO_readPin+0xaa>
    1ca2:	ca 01       	movw	r24, r20
    1ca4:	81 70       	andi	r24, 0x01	; 1
    1ca6:	90 70       	andi	r25, 0x00	; 0
    1ca8:	88 23       	and	r24, r24
    1caa:	19 f0       	breq	.+6      	; 0x1cb2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	89 83       	std	Y+1, r24	; 0x01
    1cb0:	31 c0       	rjmp	.+98     	; 0x1d14 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1cb2:	19 82       	std	Y+1, r1	; 0x01
    1cb4:	2f c0       	rjmp	.+94     	; 0x1d14 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1cb6:	e3 e3       	ldi	r30, 0x33	; 51
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	88 2f       	mov	r24, r24
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	a9 01       	movw	r20, r18
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <GPIO_readPin+0xde>
    1cca:	55 95       	asr	r21
    1ccc:	47 95       	ror	r20
    1cce:	8a 95       	dec	r24
    1cd0:	e2 f7       	brpl	.-8      	; 0x1cca <GPIO_readPin+0xda>
    1cd2:	ca 01       	movw	r24, r20
    1cd4:	81 70       	andi	r24, 0x01	; 1
    1cd6:	90 70       	andi	r25, 0x00	; 0
    1cd8:	88 23       	and	r24, r24
    1cda:	19 f0       	breq	.+6      	; 0x1ce2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	19 c0       	rjmp	.+50     	; 0x1d14 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ce2:	19 82       	std	Y+1, r1	; 0x01
    1ce4:	17 c0       	rjmp	.+46     	; 0x1d14 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1ce6:	e0 e3       	ldi	r30, 0x30	; 48
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	88 2f       	mov	r24, r24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a9 01       	movw	r20, r18
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <GPIO_readPin+0x10e>
    1cfa:	55 95       	asr	r21
    1cfc:	47 95       	ror	r20
    1cfe:	8a 95       	dec	r24
    1d00:	e2 f7       	brpl	.-8      	; 0x1cfa <GPIO_readPin+0x10a>
    1d02:	ca 01       	movw	r24, r20
    1d04:	81 70       	andi	r24, 0x01	; 1
    1d06:	90 70       	andi	r25, 0x00	; 0
    1d08:	88 23       	and	r24, r24
    1d0a:	19 f0       	breq	.+6      	; 0x1d12 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	01 c0       	rjmp	.+2      	; 0x1d14 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d12:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	00 d0       	rcall	.+0      	; 0x1d2c <GPIO_setupPortDirection+0x6>
    1d2c:	00 d0       	rcall	.+0      	; 0x1d2e <GPIO_setupPortDirection+0x8>
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	84 30       	cpi	r24, 0x04	; 4
    1d3a:	90 f5       	brcc	.+100    	; 0x1da0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	3c 83       	std	Y+4, r19	; 0x04
    1d44:	2b 83       	std	Y+3, r18	; 0x03
    1d46:	8b 81       	ldd	r24, Y+3	; 0x03
    1d48:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	d1 f0       	breq	.+52     	; 0x1d84 <GPIO_setupPortDirection+0x5e>
    1d50:	2b 81       	ldd	r18, Y+3	; 0x03
    1d52:	3c 81       	ldd	r19, Y+4	; 0x04
    1d54:	22 30       	cpi	r18, 0x02	; 2
    1d56:	31 05       	cpc	r19, r1
    1d58:	2c f4       	brge	.+10     	; 0x1d64 <GPIO_setupPortDirection+0x3e>
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5e:	00 97       	sbiw	r24, 0x00	; 0
    1d60:	61 f0       	breq	.+24     	; 0x1d7a <GPIO_setupPortDirection+0x54>
    1d62:	1e c0       	rjmp	.+60     	; 0x1da0 <GPIO_setupPortDirection+0x7a>
    1d64:	2b 81       	ldd	r18, Y+3	; 0x03
    1d66:	3c 81       	ldd	r19, Y+4	; 0x04
    1d68:	22 30       	cpi	r18, 0x02	; 2
    1d6a:	31 05       	cpc	r19, r1
    1d6c:	81 f0       	breq	.+32     	; 0x1d8e <GPIO_setupPortDirection+0x68>
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	9c 81       	ldd	r25, Y+4	; 0x04
    1d72:	83 30       	cpi	r24, 0x03	; 3
    1d74:	91 05       	cpc	r25, r1
    1d76:	81 f0       	breq	.+32     	; 0x1d98 <GPIO_setupPortDirection+0x72>
    1d78:	13 c0       	rjmp	.+38     	; 0x1da0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1d7a:	ea e3       	ldi	r30, 0x3A	; 58
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	80 83       	st	Z, r24
    1d82:	0e c0       	rjmp	.+28     	; 0x1da0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1d84:	e7 e3       	ldi	r30, 0x37	; 55
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	80 83       	st	Z, r24
    1d8c:	09 c0       	rjmp	.+18     	; 0x1da0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1d8e:	e4 e3       	ldi	r30, 0x34	; 52
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	80 83       	st	Z, r24
    1d96:	04 c0       	rjmp	.+8      	; 0x1da0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1d98:	e1 e3       	ldi	r30, 0x31	; 49
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <GPIO_writePort+0x6>
    1db4:	00 d0       	rcall	.+0      	; 0x1db6 <GPIO_writePort+0x8>
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	89 83       	std	Y+1, r24	; 0x01
    1dbc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	84 30       	cpi	r24, 0x04	; 4
    1dc2:	90 f5       	brcc	.+100    	; 0x1e28 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	3c 83       	std	Y+4, r19	; 0x04
    1dcc:	2b 83       	std	Y+3, r18	; 0x03
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd2:	81 30       	cpi	r24, 0x01	; 1
    1dd4:	91 05       	cpc	r25, r1
    1dd6:	d1 f0       	breq	.+52     	; 0x1e0c <GPIO_writePort+0x5e>
    1dd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dda:	3c 81       	ldd	r19, Y+4	; 0x04
    1ddc:	22 30       	cpi	r18, 0x02	; 2
    1dde:	31 05       	cpc	r19, r1
    1de0:	2c f4       	brge	.+10     	; 0x1dec <GPIO_writePort+0x3e>
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	9c 81       	ldd	r25, Y+4	; 0x04
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	61 f0       	breq	.+24     	; 0x1e02 <GPIO_writePort+0x54>
    1dea:	1e c0       	rjmp	.+60     	; 0x1e28 <GPIO_writePort+0x7a>
    1dec:	2b 81       	ldd	r18, Y+3	; 0x03
    1dee:	3c 81       	ldd	r19, Y+4	; 0x04
    1df0:	22 30       	cpi	r18, 0x02	; 2
    1df2:	31 05       	cpc	r19, r1
    1df4:	81 f0       	breq	.+32     	; 0x1e16 <GPIO_writePort+0x68>
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
    1df8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfa:	83 30       	cpi	r24, 0x03	; 3
    1dfc:	91 05       	cpc	r25, r1
    1dfe:	81 f0       	breq	.+32     	; 0x1e20 <GPIO_writePort+0x72>
    1e00:	13 c0       	rjmp	.+38     	; 0x1e28 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1e02:	eb e3       	ldi	r30, 0x3B	; 59
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	80 83       	st	Z, r24
    1e0a:	0e c0       	rjmp	.+28     	; 0x1e28 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1e0c:	e8 e3       	ldi	r30, 0x38	; 56
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	80 83       	st	Z, r24
    1e14:	09 c0       	rjmp	.+18     	; 0x1e28 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1e16:	e5 e3       	ldi	r30, 0x35	; 53
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1c:	80 83       	st	Z, r24
    1e1e:	04 c0       	rjmp	.+8      	; 0x1e28 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1e20:	e2 e3       	ldi	r30, 0x32	; 50
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	00 d0       	rcall	.+0      	; 0x1e3c <GPIO_readPort+0x6>
    1e3c:	00 d0       	rcall	.+0      	; 0x1e3e <GPIO_readPort+0x8>
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1e44:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	84 30       	cpi	r24, 0x04	; 4
    1e4a:	90 f5       	brcc	.+100    	; 0x1eb0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4e:	28 2f       	mov	r18, r24
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	3c 83       	std	Y+4, r19	; 0x04
    1e54:	2b 83       	std	Y+3, r18	; 0x03
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5a:	81 30       	cpi	r24, 0x01	; 1
    1e5c:	91 05       	cpc	r25, r1
    1e5e:	d1 f0       	breq	.+52     	; 0x1e94 <GPIO_readPort+0x5e>
    1e60:	2b 81       	ldd	r18, Y+3	; 0x03
    1e62:	3c 81       	ldd	r19, Y+4	; 0x04
    1e64:	22 30       	cpi	r18, 0x02	; 2
    1e66:	31 05       	cpc	r19, r1
    1e68:	2c f4       	brge	.+10     	; 0x1e74 <GPIO_readPort+0x3e>
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	61 f0       	breq	.+24     	; 0x1e8a <GPIO_readPort+0x54>
    1e72:	1e c0       	rjmp	.+60     	; 0x1eb0 <GPIO_readPort+0x7a>
    1e74:	2b 81       	ldd	r18, Y+3	; 0x03
    1e76:	3c 81       	ldd	r19, Y+4	; 0x04
    1e78:	22 30       	cpi	r18, 0x02	; 2
    1e7a:	31 05       	cpc	r19, r1
    1e7c:	81 f0       	breq	.+32     	; 0x1e9e <GPIO_readPort+0x68>
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	9c 81       	ldd	r25, Y+4	; 0x04
    1e82:	83 30       	cpi	r24, 0x03	; 3
    1e84:	91 05       	cpc	r25, r1
    1e86:	81 f0       	breq	.+32     	; 0x1ea8 <GPIO_readPort+0x72>
    1e88:	13 c0       	rjmp	.+38     	; 0x1eb0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1e8a:	e9 e3       	ldi	r30, 0x39	; 57
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	0e c0       	rjmp	.+28     	; 0x1eb0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1e94:	e6 e3       	ldi	r30, 0x36	; 54
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	89 83       	std	Y+1, r24	; 0x01
    1e9c:	09 c0       	rjmp	.+18     	; 0x1eb0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1e9e:	e3 e3       	ldi	r30, 0x33	; 51
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    1ea6:	04 c0       	rjmp	.+8      	; 0x1eb0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ea8:	e0 e3       	ldi	r30, 0x30	; 48
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	00 d0       	rcall	.+0      	; 0x1ec6 <KEYPAD_getPressedKey+0x6>
    1ec6:	0f 92       	push	r0
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1ecc:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1ece:	1b 82       	std	Y+3, r1	; 0x03
    1ed0:	43 c0       	rjmp	.+134    	; 0x1f58 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	60 e0       	ldi	r22, 0x00	; 0
    1ed6:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	98 2f       	mov	r25, r24
    1ede:	9c 5f       	subi	r25, 0xFC	; 252
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	69 2f       	mov	r22, r25
    1ee4:	41 e0       	ldi	r20, 0x01	; 1
    1ee6:	0e 94 22 0c 	call	0x1844	; 0x1844 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1eea:	8b 81       	ldd	r24, Y+3	; 0x03
    1eec:	88 2f       	mov	r24, r24
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	9c 01       	movw	r18, r24
    1ef2:	2c 5f       	subi	r18, 0xFC	; 252
    1ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <KEYPAD_getPressedKey+0x40>
    1efc:	88 0f       	add	r24, r24
    1efe:	99 1f       	adc	r25, r25
    1f00:	2a 95       	dec	r18
    1f02:	e2 f7       	brpl	.-8      	; 0x1efc <KEYPAD_getPressedKey+0x3c>
    1f04:	80 95       	com	r24
    1f06:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	69 81       	ldd	r22, Y+1	; 0x01
    1f0c:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1f10:	1a 82       	std	Y+2, r1	; 0x02
    1f12:	1c c0       	rjmp	.+56     	; 0x1f4c <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	6a 81       	ldd	r22, Y+2	; 0x02
    1f18:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <GPIO_readPin>
    1f1c:	88 23       	and	r24, r24
    1f1e:	99 f4       	brne	.+38     	; 0x1f46 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	88 2f       	mov	r24, r24
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	88 0f       	add	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	88 0f       	add	r24, r24
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	98 2f       	mov	r25, r24
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	89 0f       	add	r24, r25
    1f34:	8f 5f       	subi	r24, 0xFF	; 255
    1f36:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	8f 5f       	subi	r24, 0xFF	; 255
    1f4a:	8a 83       	std	Y+2, r24	; 0x02
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	84 30       	cpi	r24, 0x04	; 4
    1f50:	08 f3       	brcs	.-62     	; 0x1f14 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1f52:	8b 81       	ldd	r24, Y+3	; 0x03
    1f54:	8f 5f       	subi	r24, 0xFF	; 255
    1f56:	8b 83       	std	Y+3, r24	; 0x03
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	84 30       	cpi	r24, 0x04	; 4
    1f5c:	08 f4       	brcc	.+2      	; 0x1f60 <KEYPAD_getPressedKey+0xa0>
    1f5e:	b9 cf       	rjmp	.-142    	; 0x1ed2 <KEYPAD_getPressedKey+0x12>
    1f60:	b6 cf       	rjmp	.-148    	; 0x1ece <KEYPAD_getPressedKey+0xe>

00001f62 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1f62:	df 93       	push	r29
    1f64:	cf 93       	push	r28
    1f66:	00 d0       	rcall	.+0      	; 0x1f68 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1f68:	00 d0       	rcall	.+0      	; 0x1f6a <KEYPAD_4x4_adjustKeyNumber+0x8>
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
    1f6e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1f70:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	28 2f       	mov	r18, r24
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	3c 83       	std	Y+4, r19	; 0x04
    1f7a:	2b 83       	std	Y+3, r18	; 0x03
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f80:	88 30       	cpi	r24, 0x08	; 8
    1f82:	91 05       	cpc	r25, r1
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1f86:	70 c0       	rjmp	.+224    	; 0x2068 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1f88:	2b 81       	ldd	r18, Y+3	; 0x03
    1f8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f8c:	29 30       	cpi	r18, 0x09	; 9
    1f8e:	31 05       	cpc	r19, r1
    1f90:	5c f5       	brge	.+86     	; 0x1fe8 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	9c 81       	ldd	r25, Y+4	; 0x04
    1f96:	84 30       	cpi	r24, 0x04	; 4
    1f98:	91 05       	cpc	r25, r1
    1f9a:	09 f4       	brne	.+2      	; 0x1f9e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1f9c:	59 c0       	rjmp	.+178    	; 0x2050 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1f9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1fa0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fa2:	25 30       	cpi	r18, 0x05	; 5
    1fa4:	31 05       	cpc	r19, r1
    1fa6:	9c f4       	brge	.+38     	; 0x1fce <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1faa:	9c 81       	ldd	r25, Y+4	; 0x04
    1fac:	82 30       	cpi	r24, 0x02	; 2
    1fae:	91 05       	cpc	r25, r1
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1fb2:	48 c0       	rjmp	.+144    	; 0x2044 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1fb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb8:	23 30       	cpi	r18, 0x03	; 3
    1fba:	31 05       	cpc	r19, r1
    1fbc:	0c f0       	brlt	.+2      	; 0x1fc0 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1fbe:	45 c0       	rjmp	.+138    	; 0x204a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc4:	81 30       	cpi	r24, 0x01	; 1
    1fc6:	91 05       	cpc	r25, r1
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1fca:	39 c0       	rjmp	.+114    	; 0x203e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1fcc:	67 c0       	rjmp	.+206    	; 0x209c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1fce:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd2:	26 30       	cpi	r18, 0x06	; 6
    1fd4:	31 05       	cpc	r19, r1
    1fd6:	09 f4       	brne	.+2      	; 0x1fda <KEYPAD_4x4_adjustKeyNumber+0x78>
    1fd8:	41 c0       	rjmp	.+130    	; 0x205c <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fde:	87 30       	cpi	r24, 0x07	; 7
    1fe0:	91 05       	cpc	r25, r1
    1fe2:	0c f0       	brlt	.+2      	; 0x1fe6 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1fe4:	3e c0       	rjmp	.+124    	; 0x2062 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1fe6:	37 c0       	rjmp	.+110    	; 0x2056 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1fe8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fea:	3c 81       	ldd	r19, Y+4	; 0x04
    1fec:	2c 30       	cpi	r18, 0x0C	; 12
    1fee:	31 05       	cpc	r19, r1
    1ff0:	09 f4       	brne	.+2      	; 0x1ff4 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1ff2:	46 c0       	rjmp	.+140    	; 0x2080 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff8:	8d 30       	cpi	r24, 0x0D	; 13
    1ffa:	91 05       	cpc	r25, r1
    1ffc:	5c f4       	brge	.+22     	; 0x2014 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1ffe:	2b 81       	ldd	r18, Y+3	; 0x03
    2000:	3c 81       	ldd	r19, Y+4	; 0x04
    2002:	2a 30       	cpi	r18, 0x0A	; 10
    2004:	31 05       	cpc	r19, r1
    2006:	b1 f1       	breq	.+108    	; 0x2074 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	9c 81       	ldd	r25, Y+4	; 0x04
    200c:	8b 30       	cpi	r24, 0x0B	; 11
    200e:	91 05       	cpc	r25, r1
    2010:	a4 f5       	brge	.+104    	; 0x207a <KEYPAD_4x4_adjustKeyNumber+0x118>
    2012:	2d c0       	rjmp	.+90     	; 0x206e <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2014:	2b 81       	ldd	r18, Y+3	; 0x03
    2016:	3c 81       	ldd	r19, Y+4	; 0x04
    2018:	2e 30       	cpi	r18, 0x0E	; 14
    201a:	31 05       	cpc	r19, r1
    201c:	b9 f1       	breq	.+110    	; 0x208c <KEYPAD_4x4_adjustKeyNumber+0x12a>
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	9c 81       	ldd	r25, Y+4	; 0x04
    2022:	8e 30       	cpi	r24, 0x0E	; 14
    2024:	91 05       	cpc	r25, r1
    2026:	7c f1       	brlt	.+94     	; 0x2086 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2028:	2b 81       	ldd	r18, Y+3	; 0x03
    202a:	3c 81       	ldd	r19, Y+4	; 0x04
    202c:	2f 30       	cpi	r18, 0x0F	; 15
    202e:	31 05       	cpc	r19, r1
    2030:	79 f1       	breq	.+94     	; 0x2090 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	9c 81       	ldd	r25, Y+4	; 0x04
    2036:	80 31       	cpi	r24, 0x10	; 16
    2038:	91 05       	cpc	r25, r1
    203a:	69 f1       	breq	.+90     	; 0x2096 <KEYPAD_4x4_adjustKeyNumber+0x134>
    203c:	2f c0       	rjmp	.+94     	; 0x209c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    203e:	87 e0       	ldi	r24, 0x07	; 7
    2040:	89 83       	std	Y+1, r24	; 0x01
    2042:	2e c0       	rjmp	.+92     	; 0x20a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2044:	88 e0       	ldi	r24, 0x08	; 8
    2046:	89 83       	std	Y+1, r24	; 0x01
    2048:	2b c0       	rjmp	.+86     	; 0x20a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    204a:	89 e0       	ldi	r24, 0x09	; 9
    204c:	89 83       	std	Y+1, r24	; 0x01
    204e:	28 c0       	rjmp	.+80     	; 0x20a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2050:	85 e2       	ldi	r24, 0x25	; 37
    2052:	89 83       	std	Y+1, r24	; 0x01
    2054:	25 c0       	rjmp	.+74     	; 0x20a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2056:	84 e0       	ldi	r24, 0x04	; 4
    2058:	89 83       	std	Y+1, r24	; 0x01
    205a:	22 c0       	rjmp	.+68     	; 0x20a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    205c:	85 e0       	ldi	r24, 0x05	; 5
    205e:	89 83       	std	Y+1, r24	; 0x01
    2060:	1f c0       	rjmp	.+62     	; 0x20a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2062:	86 e0       	ldi	r24, 0x06	; 6
    2064:	89 83       	std	Y+1, r24	; 0x01
    2066:	1c c0       	rjmp	.+56     	; 0x20a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2068:	8a e2       	ldi	r24, 0x2A	; 42
    206a:	89 83       	std	Y+1, r24	; 0x01
    206c:	19 c0       	rjmp	.+50     	; 0x20a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	89 83       	std	Y+1, r24	; 0x01
    2072:	16 c0       	rjmp	.+44     	; 0x20a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2074:	82 e0       	ldi	r24, 0x02	; 2
    2076:	89 83       	std	Y+1, r24	; 0x01
    2078:	13 c0       	rjmp	.+38     	; 0x20a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    207a:	83 e0       	ldi	r24, 0x03	; 3
    207c:	89 83       	std	Y+1, r24	; 0x01
    207e:	10 c0       	rjmp	.+32     	; 0x20a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2080:	8d e2       	ldi	r24, 0x2D	; 45
    2082:	89 83       	std	Y+1, r24	; 0x01
    2084:	0d c0       	rjmp	.+26     	; 0x20a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2086:	8d e0       	ldi	r24, 0x0D	; 13
    2088:	89 83       	std	Y+1, r24	; 0x01
    208a:	0a c0       	rjmp	.+20     	; 0x20a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    208c:	19 82       	std	Y+1, r1	; 0x01
    208e:	08 c0       	rjmp	.+16     	; 0x20a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2090:	8d e3       	ldi	r24, 0x3D	; 61
    2092:	89 83       	std	Y+1, r24	; 0x01
    2094:	05 c0       	rjmp	.+10     	; 0x20a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2096:	8b e2       	ldi	r24, 0x2B	; 43
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
    209e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
} 
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	cf 91       	pop	r28
    20ac:	df 91       	pop	r29
    20ae:	08 95       	ret

000020b0 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    20b0:	df 93       	push	r29
    20b2:	cf 93       	push	r28
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    20b8:	83 e0       	ldi	r24, 0x03	; 3
    20ba:	64 e0       	ldi	r22, 0x04	; 4
    20bc:	41 e0       	ldi	r20, 0x01	; 1
    20be:	0e 94 22 0c 	call	0x1844	; 0x1844 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    20c2:	83 e0       	ldi	r24, 0x03	; 3
    20c4:	65 e0       	ldi	r22, 0x05	; 5
    20c6:	41 e0       	ldi	r20, 0x01	; 1
    20c8:	0e 94 22 0c 	call	0x1844	; 0x1844 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    20cc:	83 e0       	ldi	r24, 0x03	; 3
    20ce:	66 e0       	ldi	r22, 0x06	; 6
    20d0:	41 e0       	ldi	r20, 0x01	; 1
    20d2:	0e 94 22 0c 	call	0x1844	; 0x1844 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    20d6:	82 e0       	ldi	r24, 0x02	; 2
    20d8:	6f ef       	ldi	r22, 0xFF	; 255
    20da:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    20de:	88 e3       	ldi	r24, 0x38	; 56
    20e0:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    20e4:	8c e0       	ldi	r24, 0x0C	; 12
    20e6:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <LCD_sendCommand>
}
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	08 95       	ret

000020f6 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
    20fe:	e9 97       	sbiw	r28, 0x39	; 57
    2100:	0f b6       	in	r0, 0x3f	; 63
    2102:	f8 94       	cli
    2104:	de bf       	out	0x3e, r29	; 62
    2106:	0f be       	out	0x3f, r0	; 63
    2108:	cd bf       	out	0x3d, r28	; 61
    210a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    210c:	83 e0       	ldi	r24, 0x03	; 3
    210e:	64 e0       	ldi	r22, 0x04	; 4
    2110:	40 e0       	ldi	r20, 0x00	; 0
    2112:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2116:	83 e0       	ldi	r24, 0x03	; 3
    2118:	65 e0       	ldi	r22, 0x05	; 5
    211a:	40 e0       	ldi	r20, 0x00	; 0
    211c:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <GPIO_writePin>
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	a0 e8       	ldi	r26, 0x80	; 128
    2126:	bf e3       	ldi	r27, 0x3F	; 63
    2128:	8d ab       	std	Y+53, r24	; 0x35
    212a:	9e ab       	std	Y+54, r25	; 0x36
    212c:	af ab       	std	Y+55, r26	; 0x37
    212e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2130:	6d a9       	ldd	r22, Y+53	; 0x35
    2132:	7e a9       	ldd	r23, Y+54	; 0x36
    2134:	8f a9       	ldd	r24, Y+55	; 0x37
    2136:	98 ad       	ldd	r25, Y+56	; 0x38
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	4a ef       	ldi	r20, 0xFA	; 250
    213e:	54 e4       	ldi	r21, 0x44	; 68
    2140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	89 ab       	std	Y+49, r24	; 0x31
    214a:	9a ab       	std	Y+50, r25	; 0x32
    214c:	ab ab       	std	Y+51, r26	; 0x33
    214e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2150:	69 a9       	ldd	r22, Y+49	; 0x31
    2152:	7a a9       	ldd	r23, Y+50	; 0x32
    2154:	8b a9       	ldd	r24, Y+51	; 0x33
    2156:	9c a9       	ldd	r25, Y+52	; 0x34
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e8       	ldi	r20, 0x80	; 128
    215e:	5f e3       	ldi	r21, 0x3F	; 63
    2160:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2164:	88 23       	and	r24, r24
    2166:	2c f4       	brge	.+10     	; 0x2172 <LCD_sendCommand+0x7c>
		__ticks = 1;
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	98 ab       	std	Y+48, r25	; 0x30
    216e:	8f a7       	std	Y+47, r24	; 0x2f
    2170:	3f c0       	rjmp	.+126    	; 0x21f0 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    2172:	69 a9       	ldd	r22, Y+49	; 0x31
    2174:	7a a9       	ldd	r23, Y+50	; 0x32
    2176:	8b a9       	ldd	r24, Y+51	; 0x33
    2178:	9c a9       	ldd	r25, Y+52	; 0x34
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	3f ef       	ldi	r19, 0xFF	; 255
    217e:	4f e7       	ldi	r20, 0x7F	; 127
    2180:	57 e4       	ldi	r21, 0x47	; 71
    2182:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2186:	18 16       	cp	r1, r24
    2188:	4c f5       	brge	.+82     	; 0x21dc <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218a:	6d a9       	ldd	r22, Y+53	; 0x35
    218c:	7e a9       	ldd	r23, Y+54	; 0x36
    218e:	8f a9       	ldd	r24, Y+55	; 0x37
    2190:	98 ad       	ldd	r25, Y+56	; 0x38
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	40 e2       	ldi	r20, 0x20	; 32
    2198:	51 e4       	ldi	r21, 0x41	; 65
    219a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	bc 01       	movw	r22, r24
    21a4:	cd 01       	movw	r24, r26
    21a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	98 ab       	std	Y+48, r25	; 0x30
    21b0:	8f a7       	std	Y+47, r24	; 0x2f
    21b2:	0f c0       	rjmp	.+30     	; 0x21d2 <LCD_sendCommand+0xdc>
    21b4:	88 ec       	ldi	r24, 0xC8	; 200
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	9e a7       	std	Y+46, r25	; 0x2e
    21ba:	8d a7       	std	Y+45, r24	; 0x2d
    21bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    21be:	9e a5       	ldd	r25, Y+46	; 0x2e
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	f1 f7       	brne	.-4      	; 0x21c0 <LCD_sendCommand+0xca>
    21c4:	9e a7       	std	Y+46, r25	; 0x2e
    21c6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ca:	98 a9       	ldd	r25, Y+48	; 0x30
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	98 ab       	std	Y+48, r25	; 0x30
    21d0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    21d4:	98 a9       	ldd	r25, Y+48	; 0x30
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	69 f7       	brne	.-38     	; 0x21b4 <LCD_sendCommand+0xbe>
    21da:	14 c0       	rjmp	.+40     	; 0x2204 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21dc:	69 a9       	ldd	r22, Y+49	; 0x31
    21de:	7a a9       	ldd	r23, Y+50	; 0x32
    21e0:	8b a9       	ldd	r24, Y+51	; 0x33
    21e2:	9c a9       	ldd	r25, Y+52	; 0x34
    21e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	98 ab       	std	Y+48, r25	; 0x30
    21ee:	8f a7       	std	Y+47, r24	; 0x2f
    21f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    21f2:	98 a9       	ldd	r25, Y+48	; 0x30
    21f4:	9c a7       	std	Y+44, r25	; 0x2c
    21f6:	8b a7       	std	Y+43, r24	; 0x2b
    21f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    21fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	f1 f7       	brne	.-4      	; 0x21fc <LCD_sendCommand+0x106>
    2200:	9c a7       	std	Y+44, r25	; 0x2c
    2202:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2204:	83 e0       	ldi	r24, 0x03	; 3
    2206:	66 e0       	ldi	r22, 0x06	; 6
    2208:	41 e0       	ldi	r20, 0x01	; 1
    220a:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <GPIO_writePin>
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	a0 e8       	ldi	r26, 0x80	; 128
    2214:	bf e3       	ldi	r27, 0x3F	; 63
    2216:	8f a3       	std	Y+39, r24	; 0x27
    2218:	98 a7       	std	Y+40, r25	; 0x28
    221a:	a9 a7       	std	Y+41, r26	; 0x29
    221c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    221e:	6f a1       	ldd	r22, Y+39	; 0x27
    2220:	78 a5       	ldd	r23, Y+40	; 0x28
    2222:	89 a5       	ldd	r24, Y+41	; 0x29
    2224:	9a a5       	ldd	r25, Y+42	; 0x2a
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	4a ef       	ldi	r20, 0xFA	; 250
    222c:	54 e4       	ldi	r21, 0x44	; 68
    222e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	8b a3       	std	Y+35, r24	; 0x23
    2238:	9c a3       	std	Y+36, r25	; 0x24
    223a:	ad a3       	std	Y+37, r26	; 0x25
    223c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    223e:	6b a1       	ldd	r22, Y+35	; 0x23
    2240:	7c a1       	ldd	r23, Y+36	; 0x24
    2242:	8d a1       	ldd	r24, Y+37	; 0x25
    2244:	9e a1       	ldd	r25, Y+38	; 0x26
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	40 e8       	ldi	r20, 0x80	; 128
    224c:	5f e3       	ldi	r21, 0x3F	; 63
    224e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2252:	88 23       	and	r24, r24
    2254:	2c f4       	brge	.+10     	; 0x2260 <LCD_sendCommand+0x16a>
		__ticks = 1;
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	9a a3       	std	Y+34, r25	; 0x22
    225c:	89 a3       	std	Y+33, r24	; 0x21
    225e:	3f c0       	rjmp	.+126    	; 0x22de <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    2260:	6b a1       	ldd	r22, Y+35	; 0x23
    2262:	7c a1       	ldd	r23, Y+36	; 0x24
    2264:	8d a1       	ldd	r24, Y+37	; 0x25
    2266:	9e a1       	ldd	r25, Y+38	; 0x26
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	3f ef       	ldi	r19, 0xFF	; 255
    226c:	4f e7       	ldi	r20, 0x7F	; 127
    226e:	57 e4       	ldi	r21, 0x47	; 71
    2270:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2274:	18 16       	cp	r1, r24
    2276:	4c f5       	brge	.+82     	; 0x22ca <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2278:	6f a1       	ldd	r22, Y+39	; 0x27
    227a:	78 a5       	ldd	r23, Y+40	; 0x28
    227c:	89 a5       	ldd	r24, Y+41	; 0x29
    227e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	40 e2       	ldi	r20, 0x20	; 32
    2286:	51 e4       	ldi	r21, 0x41	; 65
    2288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	bc 01       	movw	r22, r24
    2292:	cd 01       	movw	r24, r26
    2294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	9a a3       	std	Y+34, r25	; 0x22
    229e:	89 a3       	std	Y+33, r24	; 0x21
    22a0:	0f c0       	rjmp	.+30     	; 0x22c0 <LCD_sendCommand+0x1ca>
    22a2:	88 ec       	ldi	r24, 0xC8	; 200
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	98 a3       	std	Y+32, r25	; 0x20
    22a8:	8f 8f       	std	Y+31, r24	; 0x1f
    22aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22ac:	98 a1       	ldd	r25, Y+32	; 0x20
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	f1 f7       	brne	.-4      	; 0x22ae <LCD_sendCommand+0x1b8>
    22b2:	98 a3       	std	Y+32, r25	; 0x20
    22b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b6:	89 a1       	ldd	r24, Y+33	; 0x21
    22b8:	9a a1       	ldd	r25, Y+34	; 0x22
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	9a a3       	std	Y+34, r25	; 0x22
    22be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c0:	89 a1       	ldd	r24, Y+33	; 0x21
    22c2:	9a a1       	ldd	r25, Y+34	; 0x22
    22c4:	00 97       	sbiw	r24, 0x00	; 0
    22c6:	69 f7       	brne	.-38     	; 0x22a2 <LCD_sendCommand+0x1ac>
    22c8:	14 c0       	rjmp	.+40     	; 0x22f2 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ca:	6b a1       	ldd	r22, Y+35	; 0x23
    22cc:	7c a1       	ldd	r23, Y+36	; 0x24
    22ce:	8d a1       	ldd	r24, Y+37	; 0x25
    22d0:	9e a1       	ldd	r25, Y+38	; 0x26
    22d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	9a a3       	std	Y+34, r25	; 0x22
    22dc:	89 a3       	std	Y+33, r24	; 0x21
    22de:	89 a1       	ldd	r24, Y+33	; 0x21
    22e0:	9a a1       	ldd	r25, Y+34	; 0x22
    22e2:	9e 8f       	std	Y+30, r25	; 0x1e
    22e4:	8d 8f       	std	Y+29, r24	; 0x1d
    22e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	f1 f7       	brne	.-4      	; 0x22ea <LCD_sendCommand+0x1f4>
    22ee:	9e 8f       	std	Y+30, r25	; 0x1e
    22f0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    22f2:	82 e0       	ldi	r24, 0x02	; 2
    22f4:	69 ad       	ldd	r22, Y+57	; 0x39
    22f6:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <GPIO_writePort>
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	a0 e8       	ldi	r26, 0x80	; 128
    2300:	bf e3       	ldi	r27, 0x3F	; 63
    2302:	89 8f       	std	Y+25, r24	; 0x19
    2304:	9a 8f       	std	Y+26, r25	; 0x1a
    2306:	ab 8f       	std	Y+27, r26	; 0x1b
    2308:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230a:	69 8d       	ldd	r22, Y+25	; 0x19
    230c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    230e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2310:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	4a ef       	ldi	r20, 0xFA	; 250
    2318:	54 e4       	ldi	r21, 0x44	; 68
    231a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	8d 8b       	std	Y+21, r24	; 0x15
    2324:	9e 8b       	std	Y+22, r25	; 0x16
    2326:	af 8b       	std	Y+23, r26	; 0x17
    2328:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    232a:	6d 89       	ldd	r22, Y+21	; 0x15
    232c:	7e 89       	ldd	r23, Y+22	; 0x16
    232e:	8f 89       	ldd	r24, Y+23	; 0x17
    2330:	98 8d       	ldd	r25, Y+24	; 0x18
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	40 e8       	ldi	r20, 0x80	; 128
    2338:	5f e3       	ldi	r21, 0x3F	; 63
    233a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    233e:	88 23       	and	r24, r24
    2340:	2c f4       	brge	.+10     	; 0x234c <LCD_sendCommand+0x256>
		__ticks = 1;
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	9c 8b       	std	Y+20, r25	; 0x14
    2348:	8b 8b       	std	Y+19, r24	; 0x13
    234a:	3f c0       	rjmp	.+126    	; 0x23ca <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    234c:	6d 89       	ldd	r22, Y+21	; 0x15
    234e:	7e 89       	ldd	r23, Y+22	; 0x16
    2350:	8f 89       	ldd	r24, Y+23	; 0x17
    2352:	98 8d       	ldd	r25, Y+24	; 0x18
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	3f ef       	ldi	r19, 0xFF	; 255
    2358:	4f e7       	ldi	r20, 0x7F	; 127
    235a:	57 e4       	ldi	r21, 0x47	; 71
    235c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2360:	18 16       	cp	r1, r24
    2362:	4c f5       	brge	.+82     	; 0x23b6 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2364:	69 8d       	ldd	r22, Y+25	; 0x19
    2366:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2368:	8b 8d       	ldd	r24, Y+27	; 0x1b
    236a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	40 e2       	ldi	r20, 0x20	; 32
    2372:	51 e4       	ldi	r21, 0x41	; 65
    2374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	bc 01       	movw	r22, r24
    237e:	cd 01       	movw	r24, r26
    2380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	9c 8b       	std	Y+20, r25	; 0x14
    238a:	8b 8b       	std	Y+19, r24	; 0x13
    238c:	0f c0       	rjmp	.+30     	; 0x23ac <LCD_sendCommand+0x2b6>
    238e:	88 ec       	ldi	r24, 0xC8	; 200
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	9a 8b       	std	Y+18, r25	; 0x12
    2394:	89 8b       	std	Y+17, r24	; 0x11
    2396:	89 89       	ldd	r24, Y+17	; 0x11
    2398:	9a 89       	ldd	r25, Y+18	; 0x12
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	f1 f7       	brne	.-4      	; 0x239a <LCD_sendCommand+0x2a4>
    239e:	9a 8b       	std	Y+18, r25	; 0x12
    23a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a2:	8b 89       	ldd	r24, Y+19	; 0x13
    23a4:	9c 89       	ldd	r25, Y+20	; 0x14
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	9c 8b       	std	Y+20, r25	; 0x14
    23aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ac:	8b 89       	ldd	r24, Y+19	; 0x13
    23ae:	9c 89       	ldd	r25, Y+20	; 0x14
    23b0:	00 97       	sbiw	r24, 0x00	; 0
    23b2:	69 f7       	brne	.-38     	; 0x238e <LCD_sendCommand+0x298>
    23b4:	14 c0       	rjmp	.+40     	; 0x23de <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b6:	6d 89       	ldd	r22, Y+21	; 0x15
    23b8:	7e 89       	ldd	r23, Y+22	; 0x16
    23ba:	8f 89       	ldd	r24, Y+23	; 0x17
    23bc:	98 8d       	ldd	r25, Y+24	; 0x18
    23be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	9c 8b       	std	Y+20, r25	; 0x14
    23c8:	8b 8b       	std	Y+19, r24	; 0x13
    23ca:	8b 89       	ldd	r24, Y+19	; 0x13
    23cc:	9c 89       	ldd	r25, Y+20	; 0x14
    23ce:	98 8b       	std	Y+16, r25	; 0x10
    23d0:	8f 87       	std	Y+15, r24	; 0x0f
    23d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    23d4:	98 89       	ldd	r25, Y+16	; 0x10
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	f1 f7       	brne	.-4      	; 0x23d6 <LCD_sendCommand+0x2e0>
    23da:	98 8b       	std	Y+16, r25	; 0x10
    23dc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    23de:	83 e0       	ldi	r24, 0x03	; 3
    23e0:	66 e0       	ldi	r22, 0x06	; 6
    23e2:	40 e0       	ldi	r20, 0x00	; 0
    23e4:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <GPIO_writePin>
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	a0 e8       	ldi	r26, 0x80	; 128
    23ee:	bf e3       	ldi	r27, 0x3F	; 63
    23f0:	8b 87       	std	Y+11, r24	; 0x0b
    23f2:	9c 87       	std	Y+12, r25	; 0x0c
    23f4:	ad 87       	std	Y+13, r26	; 0x0d
    23f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    23fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	4a ef       	ldi	r20, 0xFA	; 250
    2406:	54 e4       	ldi	r21, 0x44	; 68
    2408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	8f 83       	std	Y+7, r24	; 0x07
    2412:	98 87       	std	Y+8, r25	; 0x08
    2414:	a9 87       	std	Y+9, r26	; 0x09
    2416:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2418:	6f 81       	ldd	r22, Y+7	; 0x07
    241a:	78 85       	ldd	r23, Y+8	; 0x08
    241c:	89 85       	ldd	r24, Y+9	; 0x09
    241e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e8       	ldi	r20, 0x80	; 128
    2426:	5f e3       	ldi	r21, 0x3F	; 63
    2428:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    242c:	88 23       	and	r24, r24
    242e:	2c f4       	brge	.+10     	; 0x243a <LCD_sendCommand+0x344>
		__ticks = 1;
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	9e 83       	std	Y+6, r25	; 0x06
    2436:	8d 83       	std	Y+5, r24	; 0x05
    2438:	3f c0       	rjmp	.+126    	; 0x24b8 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    243a:	6f 81       	ldd	r22, Y+7	; 0x07
    243c:	78 85       	ldd	r23, Y+8	; 0x08
    243e:	89 85       	ldd	r24, Y+9	; 0x09
    2440:	9a 85       	ldd	r25, Y+10	; 0x0a
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	3f ef       	ldi	r19, 0xFF	; 255
    2446:	4f e7       	ldi	r20, 0x7F	; 127
    2448:	57 e4       	ldi	r21, 0x47	; 71
    244a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    244e:	18 16       	cp	r1, r24
    2450:	4c f5       	brge	.+82     	; 0x24a4 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2452:	6b 85       	ldd	r22, Y+11	; 0x0b
    2454:	7c 85       	ldd	r23, Y+12	; 0x0c
    2456:	8d 85       	ldd	r24, Y+13	; 0x0d
    2458:	9e 85       	ldd	r25, Y+14	; 0x0e
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	40 e2       	ldi	r20, 0x20	; 32
    2460:	51 e4       	ldi	r21, 0x41	; 65
    2462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	bc 01       	movw	r22, r24
    246c:	cd 01       	movw	r24, r26
    246e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	9e 83       	std	Y+6, r25	; 0x06
    2478:	8d 83       	std	Y+5, r24	; 0x05
    247a:	0f c0       	rjmp	.+30     	; 0x249a <LCD_sendCommand+0x3a4>
    247c:	88 ec       	ldi	r24, 0xC8	; 200
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	9c 83       	std	Y+4, r25	; 0x04
    2482:	8b 83       	std	Y+3, r24	; 0x03
    2484:	8b 81       	ldd	r24, Y+3	; 0x03
    2486:	9c 81       	ldd	r25, Y+4	; 0x04
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	f1 f7       	brne	.-4      	; 0x2488 <LCD_sendCommand+0x392>
    248c:	9c 83       	std	Y+4, r25	; 0x04
    248e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2490:	8d 81       	ldd	r24, Y+5	; 0x05
    2492:	9e 81       	ldd	r25, Y+6	; 0x06
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	9e 83       	std	Y+6, r25	; 0x06
    2498:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    249a:	8d 81       	ldd	r24, Y+5	; 0x05
    249c:	9e 81       	ldd	r25, Y+6	; 0x06
    249e:	00 97       	sbiw	r24, 0x00	; 0
    24a0:	69 f7       	brne	.-38     	; 0x247c <LCD_sendCommand+0x386>
    24a2:	14 c0       	rjmp	.+40     	; 0x24cc <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a4:	6f 81       	ldd	r22, Y+7	; 0x07
    24a6:	78 85       	ldd	r23, Y+8	; 0x08
    24a8:	89 85       	ldd	r24, Y+9	; 0x09
    24aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	9e 83       	std	Y+6, r25	; 0x06
    24b6:	8d 83       	std	Y+5, r24	; 0x05
    24b8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ba:	9e 81       	ldd	r25, Y+6	; 0x06
    24bc:	9a 83       	std	Y+2, r25	; 0x02
    24be:	89 83       	std	Y+1, r24	; 0x01
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	9a 81       	ldd	r25, Y+2	; 0x02
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	f1 f7       	brne	.-4      	; 0x24c4 <LCD_sendCommand+0x3ce>
    24c8:	9a 83       	std	Y+2, r25	; 0x02
    24ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    24cc:	e9 96       	adiw	r28, 0x39	; 57
    24ce:	0f b6       	in	r0, 0x3f	; 63
    24d0:	f8 94       	cli
    24d2:	de bf       	out	0x3e, r29	; 62
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	cd bf       	out	0x3d, r28	; 61
    24d8:	cf 91       	pop	r28
    24da:	df 91       	pop	r29
    24dc:	08 95       	ret

000024de <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    24de:	df 93       	push	r29
    24e0:	cf 93       	push	r28
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	e9 97       	sbiw	r28, 0x39	; 57
    24e8:	0f b6       	in	r0, 0x3f	; 63
    24ea:	f8 94       	cli
    24ec:	de bf       	out	0x3e, r29	; 62
    24ee:	0f be       	out	0x3f, r0	; 63
    24f0:	cd bf       	out	0x3d, r28	; 61
    24f2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    24f4:	83 e0       	ldi	r24, 0x03	; 3
    24f6:	64 e0       	ldi	r22, 0x04	; 4
    24f8:	41 e0       	ldi	r20, 0x01	; 1
    24fa:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    24fe:	83 e0       	ldi	r24, 0x03	; 3
    2500:	65 e0       	ldi	r22, 0x05	; 5
    2502:	40 e0       	ldi	r20, 0x00	; 0
    2504:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <GPIO_writePin>
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	a0 e8       	ldi	r26, 0x80	; 128
    250e:	bf e3       	ldi	r27, 0x3F	; 63
    2510:	8d ab       	std	Y+53, r24	; 0x35
    2512:	9e ab       	std	Y+54, r25	; 0x36
    2514:	af ab       	std	Y+55, r26	; 0x37
    2516:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2518:	6d a9       	ldd	r22, Y+53	; 0x35
    251a:	7e a9       	ldd	r23, Y+54	; 0x36
    251c:	8f a9       	ldd	r24, Y+55	; 0x37
    251e:	98 ad       	ldd	r25, Y+56	; 0x38
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	4a ef       	ldi	r20, 0xFA	; 250
    2526:	54 e4       	ldi	r21, 0x44	; 68
    2528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	89 ab       	std	Y+49, r24	; 0x31
    2532:	9a ab       	std	Y+50, r25	; 0x32
    2534:	ab ab       	std	Y+51, r26	; 0x33
    2536:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2538:	69 a9       	ldd	r22, Y+49	; 0x31
    253a:	7a a9       	ldd	r23, Y+50	; 0x32
    253c:	8b a9       	ldd	r24, Y+51	; 0x33
    253e:	9c a9       	ldd	r25, Y+52	; 0x34
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e8       	ldi	r20, 0x80	; 128
    2546:	5f e3       	ldi	r21, 0x3F	; 63
    2548:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    254c:	88 23       	and	r24, r24
    254e:	2c f4       	brge	.+10     	; 0x255a <LCD_displayCharacter+0x7c>
		__ticks = 1;
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	98 ab       	std	Y+48, r25	; 0x30
    2556:	8f a7       	std	Y+47, r24	; 0x2f
    2558:	3f c0       	rjmp	.+126    	; 0x25d8 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    255a:	69 a9       	ldd	r22, Y+49	; 0x31
    255c:	7a a9       	ldd	r23, Y+50	; 0x32
    255e:	8b a9       	ldd	r24, Y+51	; 0x33
    2560:	9c a9       	ldd	r25, Y+52	; 0x34
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	3f ef       	ldi	r19, 0xFF	; 255
    2566:	4f e7       	ldi	r20, 0x7F	; 127
    2568:	57 e4       	ldi	r21, 0x47	; 71
    256a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    256e:	18 16       	cp	r1, r24
    2570:	4c f5       	brge	.+82     	; 0x25c4 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2572:	6d a9       	ldd	r22, Y+53	; 0x35
    2574:	7e a9       	ldd	r23, Y+54	; 0x36
    2576:	8f a9       	ldd	r24, Y+55	; 0x37
    2578:	98 ad       	ldd	r25, Y+56	; 0x38
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e2       	ldi	r20, 0x20	; 32
    2580:	51 e4       	ldi	r21, 0x41	; 65
    2582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	bc 01       	movw	r22, r24
    258c:	cd 01       	movw	r24, r26
    258e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	98 ab       	std	Y+48, r25	; 0x30
    2598:	8f a7       	std	Y+47, r24	; 0x2f
    259a:	0f c0       	rjmp	.+30     	; 0x25ba <LCD_displayCharacter+0xdc>
    259c:	88 ec       	ldi	r24, 0xC8	; 200
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	9e a7       	std	Y+46, r25	; 0x2e
    25a2:	8d a7       	std	Y+45, r24	; 0x2d
    25a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    25a6:	9e a5       	ldd	r25, Y+46	; 0x2e
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	f1 f7       	brne	.-4      	; 0x25a8 <LCD_displayCharacter+0xca>
    25ac:	9e a7       	std	Y+46, r25	; 0x2e
    25ae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    25b2:	98 a9       	ldd	r25, Y+48	; 0x30
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	98 ab       	std	Y+48, r25	; 0x30
    25b8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    25bc:	98 a9       	ldd	r25, Y+48	; 0x30
    25be:	00 97       	sbiw	r24, 0x00	; 0
    25c0:	69 f7       	brne	.-38     	; 0x259c <LCD_displayCharacter+0xbe>
    25c2:	14 c0       	rjmp	.+40     	; 0x25ec <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c4:	69 a9       	ldd	r22, Y+49	; 0x31
    25c6:	7a a9       	ldd	r23, Y+50	; 0x32
    25c8:	8b a9       	ldd	r24, Y+51	; 0x33
    25ca:	9c a9       	ldd	r25, Y+52	; 0x34
    25cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	98 ab       	std	Y+48, r25	; 0x30
    25d6:	8f a7       	std	Y+47, r24	; 0x2f
    25d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    25da:	98 a9       	ldd	r25, Y+48	; 0x30
    25dc:	9c a7       	std	Y+44, r25	; 0x2c
    25de:	8b a7       	std	Y+43, r24	; 0x2b
    25e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    25e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	f1 f7       	brne	.-4      	; 0x25e4 <LCD_displayCharacter+0x106>
    25e8:	9c a7       	std	Y+44, r25	; 0x2c
    25ea:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    25ec:	83 e0       	ldi	r24, 0x03	; 3
    25ee:	66 e0       	ldi	r22, 0x06	; 6
    25f0:	41 e0       	ldi	r20, 0x01	; 1
    25f2:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <GPIO_writePin>
    25f6:	80 e0       	ldi	r24, 0x00	; 0
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	a0 e8       	ldi	r26, 0x80	; 128
    25fc:	bf e3       	ldi	r27, 0x3F	; 63
    25fe:	8f a3       	std	Y+39, r24	; 0x27
    2600:	98 a7       	std	Y+40, r25	; 0x28
    2602:	a9 a7       	std	Y+41, r26	; 0x29
    2604:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2606:	6f a1       	ldd	r22, Y+39	; 0x27
    2608:	78 a5       	ldd	r23, Y+40	; 0x28
    260a:	89 a5       	ldd	r24, Y+41	; 0x29
    260c:	9a a5       	ldd	r25, Y+42	; 0x2a
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	4a ef       	ldi	r20, 0xFA	; 250
    2614:	54 e4       	ldi	r21, 0x44	; 68
    2616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	8b a3       	std	Y+35, r24	; 0x23
    2620:	9c a3       	std	Y+36, r25	; 0x24
    2622:	ad a3       	std	Y+37, r26	; 0x25
    2624:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2626:	6b a1       	ldd	r22, Y+35	; 0x23
    2628:	7c a1       	ldd	r23, Y+36	; 0x24
    262a:	8d a1       	ldd	r24, Y+37	; 0x25
    262c:	9e a1       	ldd	r25, Y+38	; 0x26
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	40 e8       	ldi	r20, 0x80	; 128
    2634:	5f e3       	ldi	r21, 0x3F	; 63
    2636:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    263a:	88 23       	and	r24, r24
    263c:	2c f4       	brge	.+10     	; 0x2648 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	9a a3       	std	Y+34, r25	; 0x22
    2644:	89 a3       	std	Y+33, r24	; 0x21
    2646:	3f c0       	rjmp	.+126    	; 0x26c6 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2648:	6b a1       	ldd	r22, Y+35	; 0x23
    264a:	7c a1       	ldd	r23, Y+36	; 0x24
    264c:	8d a1       	ldd	r24, Y+37	; 0x25
    264e:	9e a1       	ldd	r25, Y+38	; 0x26
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	3f ef       	ldi	r19, 0xFF	; 255
    2654:	4f e7       	ldi	r20, 0x7F	; 127
    2656:	57 e4       	ldi	r21, 0x47	; 71
    2658:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    265c:	18 16       	cp	r1, r24
    265e:	4c f5       	brge	.+82     	; 0x26b2 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2660:	6f a1       	ldd	r22, Y+39	; 0x27
    2662:	78 a5       	ldd	r23, Y+40	; 0x28
    2664:	89 a5       	ldd	r24, Y+41	; 0x29
    2666:	9a a5       	ldd	r25, Y+42	; 0x2a
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	40 e2       	ldi	r20, 0x20	; 32
    266e:	51 e4       	ldi	r21, 0x41	; 65
    2670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	bc 01       	movw	r22, r24
    267a:	cd 01       	movw	r24, r26
    267c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	9a a3       	std	Y+34, r25	; 0x22
    2686:	89 a3       	std	Y+33, r24	; 0x21
    2688:	0f c0       	rjmp	.+30     	; 0x26a8 <LCD_displayCharacter+0x1ca>
    268a:	88 ec       	ldi	r24, 0xC8	; 200
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	98 a3       	std	Y+32, r25	; 0x20
    2690:	8f 8f       	std	Y+31, r24	; 0x1f
    2692:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2694:	98 a1       	ldd	r25, Y+32	; 0x20
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	f1 f7       	brne	.-4      	; 0x2696 <LCD_displayCharacter+0x1b8>
    269a:	98 a3       	std	Y+32, r25	; 0x20
    269c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269e:	89 a1       	ldd	r24, Y+33	; 0x21
    26a0:	9a a1       	ldd	r25, Y+34	; 0x22
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	9a a3       	std	Y+34, r25	; 0x22
    26a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a8:	89 a1       	ldd	r24, Y+33	; 0x21
    26aa:	9a a1       	ldd	r25, Y+34	; 0x22
    26ac:	00 97       	sbiw	r24, 0x00	; 0
    26ae:	69 f7       	brne	.-38     	; 0x268a <LCD_displayCharacter+0x1ac>
    26b0:	14 c0       	rjmp	.+40     	; 0x26da <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b2:	6b a1       	ldd	r22, Y+35	; 0x23
    26b4:	7c a1       	ldd	r23, Y+36	; 0x24
    26b6:	8d a1       	ldd	r24, Y+37	; 0x25
    26b8:	9e a1       	ldd	r25, Y+38	; 0x26
    26ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	9a a3       	std	Y+34, r25	; 0x22
    26c4:	89 a3       	std	Y+33, r24	; 0x21
    26c6:	89 a1       	ldd	r24, Y+33	; 0x21
    26c8:	9a a1       	ldd	r25, Y+34	; 0x22
    26ca:	9e 8f       	std	Y+30, r25	; 0x1e
    26cc:	8d 8f       	std	Y+29, r24	; 0x1d
    26ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	f1 f7       	brne	.-4      	; 0x26d2 <LCD_displayCharacter+0x1f4>
    26d6:	9e 8f       	std	Y+30, r25	; 0x1e
    26d8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    26da:	82 e0       	ldi	r24, 0x02	; 2
    26dc:	69 ad       	ldd	r22, Y+57	; 0x39
    26de:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <GPIO_writePort>
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	a0 e8       	ldi	r26, 0x80	; 128
    26e8:	bf e3       	ldi	r27, 0x3F	; 63
    26ea:	89 8f       	std	Y+25, r24	; 0x19
    26ec:	9a 8f       	std	Y+26, r25	; 0x1a
    26ee:	ab 8f       	std	Y+27, r26	; 0x1b
    26f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f2:	69 8d       	ldd	r22, Y+25	; 0x19
    26f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	4a ef       	ldi	r20, 0xFA	; 250
    2700:	54 e4       	ldi	r21, 0x44	; 68
    2702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	8d 8b       	std	Y+21, r24	; 0x15
    270c:	9e 8b       	std	Y+22, r25	; 0x16
    270e:	af 8b       	std	Y+23, r26	; 0x17
    2710:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2712:	6d 89       	ldd	r22, Y+21	; 0x15
    2714:	7e 89       	ldd	r23, Y+22	; 0x16
    2716:	8f 89       	ldd	r24, Y+23	; 0x17
    2718:	98 8d       	ldd	r25, Y+24	; 0x18
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e8       	ldi	r20, 0x80	; 128
    2720:	5f e3       	ldi	r21, 0x3F	; 63
    2722:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2726:	88 23       	and	r24, r24
    2728:	2c f4       	brge	.+10     	; 0x2734 <LCD_displayCharacter+0x256>
		__ticks = 1;
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	9c 8b       	std	Y+20, r25	; 0x14
    2730:	8b 8b       	std	Y+19, r24	; 0x13
    2732:	3f c0       	rjmp	.+126    	; 0x27b2 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    2734:	6d 89       	ldd	r22, Y+21	; 0x15
    2736:	7e 89       	ldd	r23, Y+22	; 0x16
    2738:	8f 89       	ldd	r24, Y+23	; 0x17
    273a:	98 8d       	ldd	r25, Y+24	; 0x18
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	3f ef       	ldi	r19, 0xFF	; 255
    2740:	4f e7       	ldi	r20, 0x7F	; 127
    2742:	57 e4       	ldi	r21, 0x47	; 71
    2744:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2748:	18 16       	cp	r1, r24
    274a:	4c f5       	brge	.+82     	; 0x279e <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274c:	69 8d       	ldd	r22, Y+25	; 0x19
    274e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2750:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2752:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e2       	ldi	r20, 0x20	; 32
    275a:	51 e4       	ldi	r21, 0x41	; 65
    275c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	bc 01       	movw	r22, r24
    2766:	cd 01       	movw	r24, r26
    2768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	9c 8b       	std	Y+20, r25	; 0x14
    2772:	8b 8b       	std	Y+19, r24	; 0x13
    2774:	0f c0       	rjmp	.+30     	; 0x2794 <LCD_displayCharacter+0x2b6>
    2776:	88 ec       	ldi	r24, 0xC8	; 200
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	9a 8b       	std	Y+18, r25	; 0x12
    277c:	89 8b       	std	Y+17, r24	; 0x11
    277e:	89 89       	ldd	r24, Y+17	; 0x11
    2780:	9a 89       	ldd	r25, Y+18	; 0x12
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	f1 f7       	brne	.-4      	; 0x2782 <LCD_displayCharacter+0x2a4>
    2786:	9a 8b       	std	Y+18, r25	; 0x12
    2788:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278a:	8b 89       	ldd	r24, Y+19	; 0x13
    278c:	9c 89       	ldd	r25, Y+20	; 0x14
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	9c 8b       	std	Y+20, r25	; 0x14
    2792:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2794:	8b 89       	ldd	r24, Y+19	; 0x13
    2796:	9c 89       	ldd	r25, Y+20	; 0x14
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	69 f7       	brne	.-38     	; 0x2776 <LCD_displayCharacter+0x298>
    279c:	14 c0       	rjmp	.+40     	; 0x27c6 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279e:	6d 89       	ldd	r22, Y+21	; 0x15
    27a0:	7e 89       	ldd	r23, Y+22	; 0x16
    27a2:	8f 89       	ldd	r24, Y+23	; 0x17
    27a4:	98 8d       	ldd	r25, Y+24	; 0x18
    27a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	9c 8b       	std	Y+20, r25	; 0x14
    27b0:	8b 8b       	std	Y+19, r24	; 0x13
    27b2:	8b 89       	ldd	r24, Y+19	; 0x13
    27b4:	9c 89       	ldd	r25, Y+20	; 0x14
    27b6:	98 8b       	std	Y+16, r25	; 0x10
    27b8:	8f 87       	std	Y+15, r24	; 0x0f
    27ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    27bc:	98 89       	ldd	r25, Y+16	; 0x10
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	f1 f7       	brne	.-4      	; 0x27be <LCD_displayCharacter+0x2e0>
    27c2:	98 8b       	std	Y+16, r25	; 0x10
    27c4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    27c6:	83 e0       	ldi	r24, 0x03	; 3
    27c8:	66 e0       	ldi	r22, 0x06	; 6
    27ca:	40 e0       	ldi	r20, 0x00	; 0
    27cc:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <GPIO_writePin>
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	a0 e8       	ldi	r26, 0x80	; 128
    27d6:	bf e3       	ldi	r27, 0x3F	; 63
    27d8:	8b 87       	std	Y+11, r24	; 0x0b
    27da:	9c 87       	std	Y+12, r25	; 0x0c
    27dc:	ad 87       	std	Y+13, r26	; 0x0d
    27de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	4a ef       	ldi	r20, 0xFA	; 250
    27ee:	54 e4       	ldi	r21, 0x44	; 68
    27f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	8f 83       	std	Y+7, r24	; 0x07
    27fa:	98 87       	std	Y+8, r25	; 0x08
    27fc:	a9 87       	std	Y+9, r26	; 0x09
    27fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2800:	6f 81       	ldd	r22, Y+7	; 0x07
    2802:	78 85       	ldd	r23, Y+8	; 0x08
    2804:	89 85       	ldd	r24, Y+9	; 0x09
    2806:	9a 85       	ldd	r25, Y+10	; 0x0a
    2808:	20 e0       	ldi	r18, 0x00	; 0
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	40 e8       	ldi	r20, 0x80	; 128
    280e:	5f e3       	ldi	r21, 0x3F	; 63
    2810:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2814:	88 23       	and	r24, r24
    2816:	2c f4       	brge	.+10     	; 0x2822 <LCD_displayCharacter+0x344>
		__ticks = 1;
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	9e 83       	std	Y+6, r25	; 0x06
    281e:	8d 83       	std	Y+5, r24	; 0x05
    2820:	3f c0       	rjmp	.+126    	; 0x28a0 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2822:	6f 81       	ldd	r22, Y+7	; 0x07
    2824:	78 85       	ldd	r23, Y+8	; 0x08
    2826:	89 85       	ldd	r24, Y+9	; 0x09
    2828:	9a 85       	ldd	r25, Y+10	; 0x0a
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	3f ef       	ldi	r19, 0xFF	; 255
    282e:	4f e7       	ldi	r20, 0x7F	; 127
    2830:	57 e4       	ldi	r21, 0x47	; 71
    2832:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2836:	18 16       	cp	r1, r24
    2838:	4c f5       	brge	.+82     	; 0x288c <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    283a:	6b 85       	ldd	r22, Y+11	; 0x0b
    283c:	7c 85       	ldd	r23, Y+12	; 0x0c
    283e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2840:	9e 85       	ldd	r25, Y+14	; 0x0e
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	40 e2       	ldi	r20, 0x20	; 32
    2848:	51 e4       	ldi	r21, 0x41	; 65
    284a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	bc 01       	movw	r22, r24
    2854:	cd 01       	movw	r24, r26
    2856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	9e 83       	std	Y+6, r25	; 0x06
    2860:	8d 83       	std	Y+5, r24	; 0x05
    2862:	0f c0       	rjmp	.+30     	; 0x2882 <LCD_displayCharacter+0x3a4>
    2864:	88 ec       	ldi	r24, 0xC8	; 200
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	9c 83       	std	Y+4, r25	; 0x04
    286a:	8b 83       	std	Y+3, r24	; 0x03
    286c:	8b 81       	ldd	r24, Y+3	; 0x03
    286e:	9c 81       	ldd	r25, Y+4	; 0x04
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	f1 f7       	brne	.-4      	; 0x2870 <LCD_displayCharacter+0x392>
    2874:	9c 83       	std	Y+4, r25	; 0x04
    2876:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2878:	8d 81       	ldd	r24, Y+5	; 0x05
    287a:	9e 81       	ldd	r25, Y+6	; 0x06
    287c:	01 97       	sbiw	r24, 0x01	; 1
    287e:	9e 83       	std	Y+6, r25	; 0x06
    2880:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2882:	8d 81       	ldd	r24, Y+5	; 0x05
    2884:	9e 81       	ldd	r25, Y+6	; 0x06
    2886:	00 97       	sbiw	r24, 0x00	; 0
    2888:	69 f7       	brne	.-38     	; 0x2864 <LCD_displayCharacter+0x386>
    288a:	14 c0       	rjmp	.+40     	; 0x28b4 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    288c:	6f 81       	ldd	r22, Y+7	; 0x07
    288e:	78 85       	ldd	r23, Y+8	; 0x08
    2890:	89 85       	ldd	r24, Y+9	; 0x09
    2892:	9a 85       	ldd	r25, Y+10	; 0x0a
    2894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	9e 83       	std	Y+6, r25	; 0x06
    289e:	8d 83       	std	Y+5, r24	; 0x05
    28a0:	8d 81       	ldd	r24, Y+5	; 0x05
    28a2:	9e 81       	ldd	r25, Y+6	; 0x06
    28a4:	9a 83       	std	Y+2, r25	; 0x02
    28a6:	89 83       	std	Y+1, r24	; 0x01
    28a8:	89 81       	ldd	r24, Y+1	; 0x01
    28aa:	9a 81       	ldd	r25, Y+2	; 0x02
    28ac:	01 97       	sbiw	r24, 0x01	; 1
    28ae:	f1 f7       	brne	.-4      	; 0x28ac <LCD_displayCharacter+0x3ce>
    28b0:	9a 83       	std	Y+2, r25	; 0x02
    28b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    28b4:	e9 96       	adiw	r28, 0x39	; 57
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	f8 94       	cli
    28ba:	de bf       	out	0x3e, r29	; 62
    28bc:	0f be       	out	0x3f, r0	; 63
    28be:	cd bf       	out	0x3d, r28	; 61
    28c0:	cf 91       	pop	r28
    28c2:	df 91       	pop	r29
    28c4:	08 95       	ret

000028c6 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    28c6:	df 93       	push	r29
    28c8:	cf 93       	push	r28
    28ca:	00 d0       	rcall	.+0      	; 0x28cc <LCD_displayString+0x6>
    28cc:	0f 92       	push	r0
    28ce:	cd b7       	in	r28, 0x3d	; 61
    28d0:	de b7       	in	r29, 0x3e	; 62
    28d2:	9b 83       	std	Y+3, r25	; 0x03
    28d4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    28d6:	19 82       	std	Y+1, r1	; 0x01
    28d8:	0e c0       	rjmp	.+28     	; 0x28f6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    28da:	89 81       	ldd	r24, Y+1	; 0x01
    28dc:	28 2f       	mov	r18, r24
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	8a 81       	ldd	r24, Y+2	; 0x02
    28e2:	9b 81       	ldd	r25, Y+3	; 0x03
    28e4:	fc 01       	movw	r30, r24
    28e6:	e2 0f       	add	r30, r18
    28e8:	f3 1f       	adc	r31, r19
    28ea:	80 81       	ld	r24, Z
    28ec:	0e 94 6f 12 	call	0x24de	; 0x24de <LCD_displayCharacter>
		i++;
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	8f 5f       	subi	r24, 0xFF	; 255
    28f4:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	28 2f       	mov	r18, r24
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	8a 81       	ldd	r24, Y+2	; 0x02
    28fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2900:	fc 01       	movw	r30, r24
    2902:	e2 0f       	add	r30, r18
    2904:	f3 1f       	adc	r31, r19
    2906:	80 81       	ld	r24, Z
    2908:	88 23       	and	r24, r24
    290a:	39 f7       	brne	.-50     	; 0x28da <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    290c:	0f 90       	pop	r0
    290e:	0f 90       	pop	r0
    2910:	0f 90       	pop	r0
    2912:	cf 91       	pop	r28
    2914:	df 91       	pop	r29
    2916:	08 95       	ret

00002918 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2918:	df 93       	push	r29
    291a:	cf 93       	push	r28
    291c:	00 d0       	rcall	.+0      	; 0x291e <LCD_moveCursor+0x6>
    291e:	00 d0       	rcall	.+0      	; 0x2920 <LCD_moveCursor+0x8>
    2920:	0f 92       	push	r0
    2922:	cd b7       	in	r28, 0x3d	; 61
    2924:	de b7       	in	r29, 0x3e	; 62
    2926:	8a 83       	std	Y+2, r24	; 0x02
    2928:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    292a:	8a 81       	ldd	r24, Y+2	; 0x02
    292c:	28 2f       	mov	r18, r24
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	3d 83       	std	Y+5, r19	; 0x05
    2932:	2c 83       	std	Y+4, r18	; 0x04
    2934:	8c 81       	ldd	r24, Y+4	; 0x04
    2936:	9d 81       	ldd	r25, Y+5	; 0x05
    2938:	81 30       	cpi	r24, 0x01	; 1
    293a:	91 05       	cpc	r25, r1
    293c:	c1 f0       	breq	.+48     	; 0x296e <LCD_moveCursor+0x56>
    293e:	2c 81       	ldd	r18, Y+4	; 0x04
    2940:	3d 81       	ldd	r19, Y+5	; 0x05
    2942:	22 30       	cpi	r18, 0x02	; 2
    2944:	31 05       	cpc	r19, r1
    2946:	2c f4       	brge	.+10     	; 0x2952 <LCD_moveCursor+0x3a>
    2948:	8c 81       	ldd	r24, Y+4	; 0x04
    294a:	9d 81       	ldd	r25, Y+5	; 0x05
    294c:	00 97       	sbiw	r24, 0x00	; 0
    294e:	61 f0       	breq	.+24     	; 0x2968 <LCD_moveCursor+0x50>
    2950:	19 c0       	rjmp	.+50     	; 0x2984 <LCD_moveCursor+0x6c>
    2952:	2c 81       	ldd	r18, Y+4	; 0x04
    2954:	3d 81       	ldd	r19, Y+5	; 0x05
    2956:	22 30       	cpi	r18, 0x02	; 2
    2958:	31 05       	cpc	r19, r1
    295a:	69 f0       	breq	.+26     	; 0x2976 <LCD_moveCursor+0x5e>
    295c:	8c 81       	ldd	r24, Y+4	; 0x04
    295e:	9d 81       	ldd	r25, Y+5	; 0x05
    2960:	83 30       	cpi	r24, 0x03	; 3
    2962:	91 05       	cpc	r25, r1
    2964:	61 f0       	breq	.+24     	; 0x297e <LCD_moveCursor+0x66>
    2966:	0e c0       	rjmp	.+28     	; 0x2984 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2968:	8b 81       	ldd	r24, Y+3	; 0x03
    296a:	89 83       	std	Y+1, r24	; 0x01
    296c:	0b c0       	rjmp	.+22     	; 0x2984 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    296e:	8b 81       	ldd	r24, Y+3	; 0x03
    2970:	80 5c       	subi	r24, 0xC0	; 192
    2972:	89 83       	std	Y+1, r24	; 0x01
    2974:	07 c0       	rjmp	.+14     	; 0x2984 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2976:	8b 81       	ldd	r24, Y+3	; 0x03
    2978:	80 5f       	subi	r24, 0xF0	; 240
    297a:	89 83       	std	Y+1, r24	; 0x01
    297c:	03 c0       	rjmp	.+6      	; 0x2984 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    297e:	8b 81       	ldd	r24, Y+3	; 0x03
    2980:	80 5b       	subi	r24, 0xB0	; 176
    2982:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2984:	89 81       	ldd	r24, Y+1	; 0x01
    2986:	80 68       	ori	r24, 0x80	; 128
    2988:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <LCD_sendCommand>
}
    298c:	0f 90       	pop	r0
    298e:	0f 90       	pop	r0
    2990:	0f 90       	pop	r0
    2992:	0f 90       	pop	r0
    2994:	0f 90       	pop	r0
    2996:	cf 91       	pop	r28
    2998:	df 91       	pop	r29
    299a:	08 95       	ret

0000299c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	00 d0       	rcall	.+0      	; 0x29a2 <LCD_displayStringRowColumn+0x6>
    29a2:	00 d0       	rcall	.+0      	; 0x29a4 <LCD_displayStringRowColumn+0x8>
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	89 83       	std	Y+1, r24	; 0x01
    29aa:	6a 83       	std	Y+2, r22	; 0x02
    29ac:	5c 83       	std	Y+4, r21	; 0x04
    29ae:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	6a 81       	ldd	r22, Y+2	; 0x02
    29b4:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    29b8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ba:	9c 81       	ldd	r25, Y+4	; 0x04
    29bc:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_displayString>
}
    29c0:	0f 90       	pop	r0
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	0f 90       	pop	r0
    29c8:	cf 91       	pop	r28
    29ca:	df 91       	pop	r29
    29cc:	08 95       	ret

000029ce <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    29ce:	df 93       	push	r29
    29d0:	cf 93       	push	r28
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
    29d6:	62 97       	sbiw	r28, 0x12	; 18
    29d8:	0f b6       	in	r0, 0x3f	; 63
    29da:	f8 94       	cli
    29dc:	de bf       	out	0x3e, r29	; 62
    29de:	0f be       	out	0x3f, r0	; 63
    29e0:	cd bf       	out	0x3d, r28	; 61
    29e2:	9a 8b       	std	Y+18, r25	; 0x12
    29e4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    29e6:	89 89       	ldd	r24, Y+17	; 0x11
    29e8:	9a 89       	ldd	r25, Y+18	; 0x12
    29ea:	9e 01       	movw	r18, r28
    29ec:	2f 5f       	subi	r18, 0xFF	; 255
    29ee:	3f 4f       	sbci	r19, 0xFF	; 255
    29f0:	b9 01       	movw	r22, r18
    29f2:	4a e0       	ldi	r20, 0x0A	; 10
    29f4:	50 e0       	ldi	r21, 0x00	; 0
    29f6:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <itoa>
   LCD_displayString(buff); /* Display the string */
    29fa:	ce 01       	movw	r24, r28
    29fc:	01 96       	adiw	r24, 0x01	; 1
    29fe:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_displayString>
}
    2a02:	62 96       	adiw	r28, 0x12	; 18
    2a04:	0f b6       	in	r0, 0x3f	; 63
    2a06:	f8 94       	cli
    2a08:	de bf       	out	0x3e, r29	; 62
    2a0a:	0f be       	out	0x3f, r0	; 63
    2a0c:	cd bf       	out	0x3d, r28	; 61
    2a0e:	cf 91       	pop	r28
    2a10:	df 91       	pop	r29
    2a12:	08 95       	ret

00002a14 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2a14:	df 93       	push	r29
    2a16:	cf 93       	push	r28
    2a18:	cd b7       	in	r28, 0x3d	; 61
    2a1a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <LCD_sendCommand>
}
    2a22:	cf 91       	pop	r28
    2a24:	df 91       	pop	r29
    2a26:	08 95       	ret

00002a28 <__vector_19>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
  ISR(TIMER0_COMP_vect)
  {
    2a28:	1f 92       	push	r1
    2a2a:	0f 92       	push	r0
    2a2c:	0f b6       	in	r0, 0x3f	; 63
    2a2e:	0f 92       	push	r0
    2a30:	11 24       	eor	r1, r1
    2a32:	2f 93       	push	r18
    2a34:	3f 93       	push	r19
    2a36:	4f 93       	push	r20
    2a38:	5f 93       	push	r21
    2a3a:	6f 93       	push	r22
    2a3c:	7f 93       	push	r23
    2a3e:	8f 93       	push	r24
    2a40:	9f 93       	push	r25
    2a42:	af 93       	push	r26
    2a44:	bf 93       	push	r27
    2a46:	ef 93       	push	r30
    2a48:	ff 93       	push	r31
    2a4a:	df 93       	push	r29
    2a4c:	cf 93       	push	r28
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
 	if(g_callBackPtr != NULL_PTR)
    2a52:	80 91 44 01 	lds	r24, 0x0144
    2a56:	90 91 45 01 	lds	r25, 0x0145
    2a5a:	00 97       	sbiw	r24, 0x00	; 0
    2a5c:	29 f0       	breq	.+10     	; 0x2a68 <__vector_19+0x40>
 	{
  		/* Call the Call Back function in the application */
  		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2a5e:	e0 91 44 01 	lds	r30, 0x0144
    2a62:	f0 91 45 01 	lds	r31, 0x0145
    2a66:	09 95       	icall
  	}
  }
    2a68:	cf 91       	pop	r28
    2a6a:	df 91       	pop	r29
    2a6c:	ff 91       	pop	r31
    2a6e:	ef 91       	pop	r30
    2a70:	bf 91       	pop	r27
    2a72:	af 91       	pop	r26
    2a74:	9f 91       	pop	r25
    2a76:	8f 91       	pop	r24
    2a78:	7f 91       	pop	r23
    2a7a:	6f 91       	pop	r22
    2a7c:	5f 91       	pop	r21
    2a7e:	4f 91       	pop	r20
    2a80:	3f 91       	pop	r19
    2a82:	2f 91       	pop	r18
    2a84:	0f 90       	pop	r0
    2a86:	0f be       	out	0x3f, r0	; 63
    2a88:	0f 90       	pop	r0
    2a8a:	1f 90       	pop	r1
    2a8c:	18 95       	reti

00002a8e <__vector_9>:

  ISR(TIMER0_OVF_vect)
  {
    2a8e:	1f 92       	push	r1
    2a90:	0f 92       	push	r0
    2a92:	0f b6       	in	r0, 0x3f	; 63
    2a94:	0f 92       	push	r0
    2a96:	11 24       	eor	r1, r1
    2a98:	2f 93       	push	r18
    2a9a:	3f 93       	push	r19
    2a9c:	4f 93       	push	r20
    2a9e:	5f 93       	push	r21
    2aa0:	6f 93       	push	r22
    2aa2:	7f 93       	push	r23
    2aa4:	8f 93       	push	r24
    2aa6:	9f 93       	push	r25
    2aa8:	af 93       	push	r26
    2aaa:	bf 93       	push	r27
    2aac:	ef 93       	push	r30
    2aae:	ff 93       	push	r31
    2ab0:	df 93       	push	r29
    2ab2:	cf 93       	push	r28
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2ab8:	80 91 44 01 	lds	r24, 0x0144
    2abc:	90 91 45 01 	lds	r25, 0x0145
    2ac0:	00 97       	sbiw	r24, 0x00	; 0
    2ac2:	29 f0       	breq	.+10     	; 0x2ace <__vector_9+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2ac4:	e0 91 44 01 	lds	r30, 0x0144
    2ac8:	f0 91 45 01 	lds	r31, 0x0145
    2acc:	09 95       	icall
	}
  }
    2ace:	cf 91       	pop	r28
    2ad0:	df 91       	pop	r29
    2ad2:	ff 91       	pop	r31
    2ad4:	ef 91       	pop	r30
    2ad6:	bf 91       	pop	r27
    2ad8:	af 91       	pop	r26
    2ada:	9f 91       	pop	r25
    2adc:	8f 91       	pop	r24
    2ade:	7f 91       	pop	r23
    2ae0:	6f 91       	pop	r22
    2ae2:	5f 91       	pop	r21
    2ae4:	4f 91       	pop	r20
    2ae6:	3f 91       	pop	r19
    2ae8:	2f 91       	pop	r18
    2aea:	0f 90       	pop	r0
    2aec:	0f be       	out	0x3f, r0	; 63
    2aee:	0f 90       	pop	r0
    2af0:	1f 90       	pop	r1
    2af2:	18 95       	reti

00002af4 <Timer0_Init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer0_Init(const Timer0_ConfigType * Config_Ptr)
{
    2af4:	df 93       	push	r29
    2af6:	cf 93       	push	r28
    2af8:	00 d0       	rcall	.+0      	; 0x2afa <Timer0_Init+0x6>
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	9a 83       	std	Y+2, r25	; 0x02
    2b00:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TCCR0,FOC0); /*non PWM mode*/
    2b02:	a3 e5       	ldi	r26, 0x53	; 83
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	e3 e5       	ldi	r30, 0x53	; 83
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	80 81       	ld	r24, Z
    2b0c:	80 68       	ori	r24, 0x80	; 128
    2b0e:	8c 93       	st	X, r24
	if((Config_Ptr->timer_mode)==NORMAL_MODE)
    2b10:	e9 81       	ldd	r30, Y+1	; 0x01
    2b12:	fa 81       	ldd	r31, Y+2	; 0x02
    2b14:	80 81       	ld	r24, Z
    2b16:	88 23       	and	r24, r24
    2b18:	b1 f4       	brne	.+44     	; 0x2b46 <Timer0_Init+0x52>
	{
		/*choosing normal mode*/
		CLEAR_BIT(TCCR0,WGM00);
    2b1a:	a3 e5       	ldi	r26, 0x53	; 83
    2b1c:	b0 e0       	ldi	r27, 0x00	; 0
    2b1e:	e3 e5       	ldi	r30, 0x53	; 83
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	80 81       	ld	r24, Z
    2b24:	8f 7b       	andi	r24, 0xBF	; 191
    2b26:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,WGM01);
    2b28:	a3 e5       	ldi	r26, 0x53	; 83
    2b2a:	b0 e0       	ldi	r27, 0x00	; 0
    2b2c:	e3 e5       	ldi	r30, 0x53	; 83
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	80 81       	ld	r24, Z
    2b32:	87 7f       	andi	r24, 0xF7	; 247
    2b34:	8c 93       	st	X, r24
		/*enable normal mode interrupt*/
		SET_BIT(TIMSK,TOIE0);
    2b36:	a9 e5       	ldi	r26, 0x59	; 89
    2b38:	b0 e0       	ldi	r27, 0x00	; 0
    2b3a:	e9 e5       	ldi	r30, 0x59	; 89
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	80 81       	ld	r24, Z
    2b40:	81 60       	ori	r24, 0x01	; 1
    2b42:	8c 93       	st	X, r24
    2b44:	20 c0       	rjmp	.+64     	; 0x2b86 <Timer0_Init+0x92>
	}
	else if((Config_Ptr->timer_mode)==COMPARE_MODE)
    2b46:	e9 81       	ldd	r30, Y+1	; 0x01
    2b48:	fa 81       	ldd	r31, Y+2	; 0x02
    2b4a:	80 81       	ld	r24, Z
    2b4c:	81 30       	cpi	r24, 0x01	; 1
    2b4e:	d9 f4       	brne	.+54     	; 0x2b86 <Timer0_Init+0x92>
	{
		/*choosing compare mode*/
		CLEAR_BIT(TCCR0,WGM00);
    2b50:	a3 e5       	ldi	r26, 0x53	; 83
    2b52:	b0 e0       	ldi	r27, 0x00	; 0
    2b54:	e3 e5       	ldi	r30, 0x53	; 83
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	80 81       	ld	r24, Z
    2b5a:	8f 7b       	andi	r24, 0xBF	; 191
    2b5c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    2b5e:	a3 e5       	ldi	r26, 0x53	; 83
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	e3 e5       	ldi	r30, 0x53	; 83
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	80 81       	ld	r24, Z
    2b68:	88 60       	ori	r24, 0x08	; 8
    2b6a:	8c 93       	st	X, r24
		/*enable compare mode interrupt*/
		SET_BIT(TIMSK,OCIE0);
    2b6c:	a9 e5       	ldi	r26, 0x59	; 89
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	e9 e5       	ldi	r30, 0x59	; 89
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
    2b76:	82 60       	ori	r24, 0x02	; 2
    2b78:	8c 93       	st	X, r24
		/*Compare value of the timer*/
		OCR0 = Config_Ptr->compare_value;
    2b7a:	ac e5       	ldi	r26, 0x5C	; 92
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b80:	fa 81       	ldd	r31, Y+2	; 0x02
    2b82:	83 81       	ldd	r24, Z+3	; 0x03
    2b84:	8c 93       	st	X, r24
	}
	/*Normal port operation, OC0 disconnected*/
	CLEAR_BIT(TCCR0,COM00);
    2b86:	a3 e5       	ldi	r26, 0x53	; 83
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	e3 e5       	ldi	r30, 0x53	; 83
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	80 81       	ld	r24, Z
    2b90:	8f 7e       	andi	r24, 0xEF	; 239
    2b92:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,COM01);
    2b94:	a3 e5       	ldi	r26, 0x53	; 83
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	e3 e5       	ldi	r30, 0x53	; 83
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	80 81       	ld	r24, Z
    2b9e:	8f 7d       	andi	r24, 0xDF	; 223
    2ba0:	8c 93       	st	X, r24

	/*prescaler*/
	TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->prescaler);
    2ba2:	a3 e5       	ldi	r26, 0x53	; 83
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	e3 e5       	ldi	r30, 0x53	; 83
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	80 81       	ld	r24, Z
    2bac:	98 2f       	mov	r25, r24
    2bae:	98 7f       	andi	r25, 0xF8	; 248
    2bb0:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb2:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb4:	81 81       	ldd	r24, Z+1	; 0x01
    2bb6:	89 2b       	or	r24, r25
    2bb8:	8c 93       	st	X, r24

	/*initial value of the timer*/
	TCNT0 = Config_Ptr->initial_value;
    2bba:	a2 e5       	ldi	r26, 0x52	; 82
    2bbc:	b0 e0       	ldi	r27, 0x00	; 0
    2bbe:	e9 81       	ldd	r30, Y+1	; 0x01
    2bc0:	fa 81       	ldd	r31, Y+2	; 0x02
    2bc2:	82 81       	ldd	r24, Z+2	; 0x02
    2bc4:	8c 93       	st	X, r24


}
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	cf 91       	pop	r28
    2bcc:	df 91       	pop	r29
    2bce:	08 95       	ret

00002bd0 <Timer0_DeInit>:

void Timer0_DeInit(void)
{
    2bd0:	df 93       	push	r29
    2bd2:	cf 93       	push	r28
    2bd4:	cd b7       	in	r28, 0x3d	; 61
    2bd6:	de b7       	in	r29, 0x3e	; 62
	/*clear all the timer registers*/
	TCCR0=0;
    2bd8:	e3 e5       	ldi	r30, 0x53	; 83
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	10 82       	st	Z, r1
	TCNT0=0;
    2bde:	e2 e5       	ldi	r30, 0x52	; 82
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	10 82       	st	Z, r1
	OCR0=0;
    2be4:	ec e5       	ldi	r30, 0x5C	; 92
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	10 82       	st	Z, r1
    /*Disable the interrupts*/
	CLEAR_BIT(TIMSK,OCIE0);
    2bea:	a9 e5       	ldi	r26, 0x59	; 89
    2bec:	b0 e0       	ldi	r27, 0x00	; 0
    2bee:	e9 e5       	ldi	r30, 0x59	; 89
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	80 81       	ld	r24, Z
    2bf4:	8d 7f       	andi	r24, 0xFD	; 253
    2bf6:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE0);
    2bf8:	a9 e5       	ldi	r26, 0x59	; 89
    2bfa:	b0 e0       	ldi	r27, 0x00	; 0
    2bfc:	e9 e5       	ldi	r30, 0x59	; 89
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	80 81       	ld	r24, Z
    2c02:	8e 7f       	andi	r24, 0xFE	; 254
    2c04:	8c 93       	st	X, r24
}
    2c06:	cf 91       	pop	r28
    2c08:	df 91       	pop	r29
    2c0a:	08 95       	ret

00002c0c <Timer0_setCallBack>:

void Timer0_setCallBack(void(*a_ptr)(void))
{
    2c0c:	df 93       	push	r29
    2c0e:	cf 93       	push	r28
    2c10:	00 d0       	rcall	.+0      	; 0x2c12 <Timer0_setCallBack+0x6>
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62
    2c16:	9a 83       	std	Y+2, r25	; 0x02
    2c18:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2c1a:	89 81       	ldd	r24, Y+1	; 0x01
    2c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1e:	90 93 45 01 	sts	0x0145, r25
    2c22:	80 93 44 01 	sts	0x0144, r24
}
    2c26:	0f 90       	pop	r0
    2c28:	0f 90       	pop	r0
    2c2a:	cf 91       	pop	r28
    2c2c:	df 91       	pop	r29
    2c2e:	08 95       	ret

00002c30 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2c30:	df 93       	push	r29
    2c32:	cf 93       	push	r28
    2c34:	00 d0       	rcall	.+0      	; 0x2c36 <UART_init+0x6>
    2c36:	00 d0       	rcall	.+0      	; 0x2c38 <UART_init+0x8>
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
    2c3c:	9c 83       	std	Y+4, r25	; 0x04
    2c3e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2c40:	1a 82       	std	Y+2, r1	; 0x02
    2c42:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2c44:	eb e2       	ldi	r30, 0x2B	; 43
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	82 e0       	ldi	r24, 0x02	; 2
    2c4a:	80 83       	st	Z, r24
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For all data modes except 9-bit UCSZ2=1
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 

	UCSRB = (1<<RXEN) | (1<<TXEN);
    2c4c:	ea e2       	ldi	r30, 0x2A	; 42
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	88 e1       	ldi	r24, 0x18	; 24
    2c52:	80 83       	st	Z, r24
	 * UPM1:0  = parity bit type
	 * USBS    = stop bits number
	 * UCSZ1:0 = data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	SET_BIT(UCSRC,URSEL);
    2c54:	a0 e4       	ldi	r26, 0x40	; 64
    2c56:	b0 e0       	ldi	r27, 0x00	; 0
    2c58:	e0 e4       	ldi	r30, 0x40	; 64
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	80 81       	ld	r24, Z
    2c5e:	80 68       	ori	r24, 0x80	; 128
    2c60:	8c 93       	st	X, r24
	UCSRC = (UCSRC & (0xCF)) | ((Config_Ptr->parity) << UPM0);
    2c62:	a0 e4       	ldi	r26, 0x40	; 64
    2c64:	b0 e0       	ldi	r27, 0x00	; 0
    2c66:	e0 e4       	ldi	r30, 0x40	; 64
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	28 2f       	mov	r18, r24
    2c6e:	2f 7c       	andi	r18, 0xCF	; 207
    2c70:	eb 81       	ldd	r30, Y+3	; 0x03
    2c72:	fc 81       	ldd	r31, Y+4	; 0x04
    2c74:	84 81       	ldd	r24, Z+4	; 0x04
    2c76:	88 2f       	mov	r24, r24
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	82 95       	swap	r24
    2c7c:	92 95       	swap	r25
    2c7e:	90 7f       	andi	r25, 0xF0	; 240
    2c80:	98 27       	eor	r25, r24
    2c82:	80 7f       	andi	r24, 0xF0	; 240
    2c84:	98 27       	eor	r25, r24
    2c86:	82 2b       	or	r24, r18
    2c88:	8c 93       	st	X, r24
	UCSRC = (UCSRC & (0xF7)) | ((Config_Ptr->stop_bits) << USBS);
    2c8a:	a0 e4       	ldi	r26, 0x40	; 64
    2c8c:	b0 e0       	ldi	r27, 0x00	; 0
    2c8e:	e0 e4       	ldi	r30, 0x40	; 64
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	80 81       	ld	r24, Z
    2c94:	28 2f       	mov	r18, r24
    2c96:	27 7f       	andi	r18, 0xF7	; 247
    2c98:	eb 81       	ldd	r30, Y+3	; 0x03
    2c9a:	fc 81       	ldd	r31, Y+4	; 0x04
    2c9c:	85 81       	ldd	r24, Z+5	; 0x05
    2c9e:	88 2f       	mov	r24, r24
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	88 0f       	add	r24, r24
    2ca4:	99 1f       	adc	r25, r25
    2ca6:	88 0f       	add	r24, r24
    2ca8:	99 1f       	adc	r25, r25
    2caa:	88 0f       	add	r24, r24
    2cac:	99 1f       	adc	r25, r25
    2cae:	82 2b       	or	r24, r18
    2cb0:	8c 93       	st	X, r24
	UCSRC = (UCSRC & (0xF9)) | ((Config_Ptr->data_bits) << UCSZ0);
    2cb2:	a0 e4       	ldi	r26, 0x40	; 64
    2cb4:	b0 e0       	ldi	r27, 0x00	; 0
    2cb6:	e0 e4       	ldi	r30, 0x40	; 64
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	80 81       	ld	r24, Z
    2cbc:	28 2f       	mov	r18, r24
    2cbe:	29 7f       	andi	r18, 0xF9	; 249
    2cc0:	eb 81       	ldd	r30, Y+3	; 0x03
    2cc2:	fc 81       	ldd	r31, Y+4	; 0x04
    2cc4:	86 81       	ldd	r24, Z+6	; 0x06
    2cc6:	88 2f       	mov	r24, r24
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	88 0f       	add	r24, r24
    2ccc:	99 1f       	adc	r25, r25
    2cce:	82 2b       	or	r24, r18
    2cd0:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)((((F_CPU*8) / (Config_Ptr->baud_rate * 8UL))) - 1);
    2cd2:	eb 81       	ldd	r30, Y+3	; 0x03
    2cd4:	fc 81       	ldd	r31, Y+4	; 0x04
    2cd6:	80 81       	ld	r24, Z
    2cd8:	91 81       	ldd	r25, Z+1	; 0x01
    2cda:	a2 81       	ldd	r26, Z+2	; 0x02
    2cdc:	b3 81       	ldd	r27, Z+3	; 0x03
    2cde:	88 0f       	add	r24, r24
    2ce0:	99 1f       	adc	r25, r25
    2ce2:	aa 1f       	adc	r26, r26
    2ce4:	bb 1f       	adc	r27, r27
    2ce6:	88 0f       	add	r24, r24
    2ce8:	99 1f       	adc	r25, r25
    2cea:	aa 1f       	adc	r26, r26
    2cec:	bb 1f       	adc	r27, r27
    2cee:	88 0f       	add	r24, r24
    2cf0:	99 1f       	adc	r25, r25
    2cf2:	aa 1f       	adc	r26, r26
    2cf4:	bb 1f       	adc	r27, r27
    2cf6:	9c 01       	movw	r18, r24
    2cf8:	ad 01       	movw	r20, r26
    2cfa:	80 e0       	ldi	r24, 0x00	; 0
    2cfc:	92 e1       	ldi	r25, 0x12	; 18
    2cfe:	aa e7       	ldi	r26, 0x7A	; 122
    2d00:	b0 e0       	ldi	r27, 0x00	; 0
    2d02:	bc 01       	movw	r22, r24
    2d04:	cd 01       	movw	r24, r26
    2d06:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__udivmodsi4>
    2d0a:	da 01       	movw	r26, r20
    2d0c:	c9 01       	movw	r24, r18
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	9a 83       	std	Y+2, r25	; 0x02
    2d12:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2d14:	e0 e4       	ldi	r30, 0x40	; 64
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	89 81       	ldd	r24, Y+1	; 0x01
    2d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1c:	89 2f       	mov	r24, r25
    2d1e:	99 27       	eor	r25, r25
    2d20:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2d22:	e9 e2       	ldi	r30, 0x29	; 41
    2d24:	f0 e0       	ldi	r31, 0x00	; 0
    2d26:	89 81       	ldd	r24, Y+1	; 0x01
    2d28:	80 83       	st	Z, r24
}
    2d2a:	0f 90       	pop	r0
    2d2c:	0f 90       	pop	r0
    2d2e:	0f 90       	pop	r0
    2d30:	0f 90       	pop	r0
    2d32:	cf 91       	pop	r28
    2d34:	df 91       	pop	r29
    2d36:	08 95       	ret

00002d38 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2d38:	df 93       	push	r29
    2d3a:	cf 93       	push	r28
    2d3c:	0f 92       	push	r0
    2d3e:	cd b7       	in	r28, 0x3d	; 61
    2d40:	de b7       	in	r29, 0x3e	; 62
    2d42:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2d44:	eb e2       	ldi	r30, 0x2B	; 43
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	80 81       	ld	r24, Z
    2d4a:	88 2f       	mov	r24, r24
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	80 72       	andi	r24, 0x20	; 32
    2d50:	90 70       	andi	r25, 0x00	; 0
    2d52:	00 97       	sbiw	r24, 0x00	; 0
    2d54:	b9 f3       	breq	.-18     	; 0x2d44 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2d56:	ec e2       	ldi	r30, 0x2C	; 44
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
    2d5c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2d5e:	0f 90       	pop	r0
    2d60:	cf 91       	pop	r28
    2d62:	df 91       	pop	r29
    2d64:	08 95       	ret

00002d66 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2d66:	df 93       	push	r29
    2d68:	cf 93       	push	r28
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2d6e:	eb e2       	ldi	r30, 0x2B	; 43
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	80 81       	ld	r24, Z
    2d74:	88 23       	and	r24, r24
    2d76:	dc f7       	brge	.-10     	; 0x2d6e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2d78:	ec e2       	ldi	r30, 0x2C	; 44
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	80 81       	ld	r24, Z
}
    2d7e:	cf 91       	pop	r28
    2d80:	df 91       	pop	r29
    2d82:	08 95       	ret

00002d84 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2d84:	df 93       	push	r29
    2d86:	cf 93       	push	r28
    2d88:	00 d0       	rcall	.+0      	; 0x2d8a <UART_sendString+0x6>
    2d8a:	0f 92       	push	r0
    2d8c:	cd b7       	in	r28, 0x3d	; 61
    2d8e:	de b7       	in	r29, 0x3e	; 62
    2d90:	9b 83       	std	Y+3, r25	; 0x03
    2d92:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d94:	19 82       	std	Y+1, r1	; 0x01
    2d96:	0e c0       	rjmp	.+28     	; 0x2db4 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2d98:	89 81       	ldd	r24, Y+1	; 0x01
    2d9a:	28 2f       	mov	r18, r24
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2da0:	9b 81       	ldd	r25, Y+3	; 0x03
    2da2:	fc 01       	movw	r30, r24
    2da4:	e2 0f       	add	r30, r18
    2da6:	f3 1f       	adc	r31, r19
    2da8:	80 81       	ld	r24, Z
    2daa:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <UART_sendByte>
		i++;
    2dae:	89 81       	ldd	r24, Y+1	; 0x01
    2db0:	8f 5f       	subi	r24, 0xFF	; 255
    2db2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	28 2f       	mov	r18, r24
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	8a 81       	ldd	r24, Y+2	; 0x02
    2dbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	e2 0f       	add	r30, r18
    2dc2:	f3 1f       	adc	r31, r19
    2dc4:	80 81       	ld	r24, Z
    2dc6:	88 23       	and	r24, r24
    2dc8:	39 f7       	brne	.-50     	; 0x2d98 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2dca:	0f 90       	pop	r0
    2dcc:	0f 90       	pop	r0
    2dce:	0f 90       	pop	r0
    2dd0:	cf 91       	pop	r28
    2dd2:	df 91       	pop	r29
    2dd4:	08 95       	ret

00002dd6 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2dd6:	0f 93       	push	r16
    2dd8:	1f 93       	push	r17
    2dda:	df 93       	push	r29
    2ddc:	cf 93       	push	r28
    2dde:	00 d0       	rcall	.+0      	; 0x2de0 <UART_receiveString+0xa>
    2de0:	0f 92       	push	r0
    2de2:	cd b7       	in	r28, 0x3d	; 61
    2de4:	de b7       	in	r29, 0x3e	; 62
    2de6:	9b 83       	std	Y+3, r25	; 0x03
    2de8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2dea:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2dec:	89 81       	ldd	r24, Y+1	; 0x01
    2dee:	28 2f       	mov	r18, r24
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	8a 81       	ldd	r24, Y+2	; 0x02
    2df4:	9b 81       	ldd	r25, Y+3	; 0x03
    2df6:	8c 01       	movw	r16, r24
    2df8:	02 0f       	add	r16, r18
    2dfa:	13 1f       	adc	r17, r19
    2dfc:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <UART_recieveByte>
    2e00:	f8 01       	movw	r30, r16
    2e02:	80 83       	st	Z, r24
    2e04:	0f c0       	rjmp	.+30     	; 0x2e24 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	8f 5f       	subi	r24, 0xFF	; 255
    2e0a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2e0c:	89 81       	ldd	r24, Y+1	; 0x01
    2e0e:	28 2f       	mov	r18, r24
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	8a 81       	ldd	r24, Y+2	; 0x02
    2e14:	9b 81       	ldd	r25, Y+3	; 0x03
    2e16:	8c 01       	movw	r16, r24
    2e18:	02 0f       	add	r16, r18
    2e1a:	13 1f       	adc	r17, r19
    2e1c:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <UART_recieveByte>
    2e20:	f8 01       	movw	r30, r16
    2e22:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2e24:	89 81       	ldd	r24, Y+1	; 0x01
    2e26:	28 2f       	mov	r18, r24
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e2e:	fc 01       	movw	r30, r24
    2e30:	e2 0f       	add	r30, r18
    2e32:	f3 1f       	adc	r31, r19
    2e34:	80 81       	ld	r24, Z
    2e36:	83 32       	cpi	r24, 0x23	; 35
    2e38:	31 f7       	brne	.-52     	; 0x2e06 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2e3a:	89 81       	ldd	r24, Y+1	; 0x01
    2e3c:	28 2f       	mov	r18, r24
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	8a 81       	ldd	r24, Y+2	; 0x02
    2e42:	9b 81       	ldd	r25, Y+3	; 0x03
    2e44:	fc 01       	movw	r30, r24
    2e46:	e2 0f       	add	r30, r18
    2e48:	f3 1f       	adc	r31, r19
    2e4a:	10 82       	st	Z, r1
}
    2e4c:	0f 90       	pop	r0
    2e4e:	0f 90       	pop	r0
    2e50:	0f 90       	pop	r0
    2e52:	cf 91       	pop	r28
    2e54:	df 91       	pop	r29
    2e56:	1f 91       	pop	r17
    2e58:	0f 91       	pop	r16
    2e5a:	08 95       	ret

00002e5c <__udivmodsi4>:
    2e5c:	a1 e2       	ldi	r26, 0x21	; 33
    2e5e:	1a 2e       	mov	r1, r26
    2e60:	aa 1b       	sub	r26, r26
    2e62:	bb 1b       	sub	r27, r27
    2e64:	fd 01       	movw	r30, r26
    2e66:	0d c0       	rjmp	.+26     	; 0x2e82 <__udivmodsi4_ep>

00002e68 <__udivmodsi4_loop>:
    2e68:	aa 1f       	adc	r26, r26
    2e6a:	bb 1f       	adc	r27, r27
    2e6c:	ee 1f       	adc	r30, r30
    2e6e:	ff 1f       	adc	r31, r31
    2e70:	a2 17       	cp	r26, r18
    2e72:	b3 07       	cpc	r27, r19
    2e74:	e4 07       	cpc	r30, r20
    2e76:	f5 07       	cpc	r31, r21
    2e78:	20 f0       	brcs	.+8      	; 0x2e82 <__udivmodsi4_ep>
    2e7a:	a2 1b       	sub	r26, r18
    2e7c:	b3 0b       	sbc	r27, r19
    2e7e:	e4 0b       	sbc	r30, r20
    2e80:	f5 0b       	sbc	r31, r21

00002e82 <__udivmodsi4_ep>:
    2e82:	66 1f       	adc	r22, r22
    2e84:	77 1f       	adc	r23, r23
    2e86:	88 1f       	adc	r24, r24
    2e88:	99 1f       	adc	r25, r25
    2e8a:	1a 94       	dec	r1
    2e8c:	69 f7       	brne	.-38     	; 0x2e68 <__udivmodsi4_loop>
    2e8e:	60 95       	com	r22
    2e90:	70 95       	com	r23
    2e92:	80 95       	com	r24
    2e94:	90 95       	com	r25
    2e96:	9b 01       	movw	r18, r22
    2e98:	ac 01       	movw	r20, r24
    2e9a:	bd 01       	movw	r22, r26
    2e9c:	cf 01       	movw	r24, r30
    2e9e:	08 95       	ret

00002ea0 <__prologue_saves__>:
    2ea0:	2f 92       	push	r2
    2ea2:	3f 92       	push	r3
    2ea4:	4f 92       	push	r4
    2ea6:	5f 92       	push	r5
    2ea8:	6f 92       	push	r6
    2eaa:	7f 92       	push	r7
    2eac:	8f 92       	push	r8
    2eae:	9f 92       	push	r9
    2eb0:	af 92       	push	r10
    2eb2:	bf 92       	push	r11
    2eb4:	cf 92       	push	r12
    2eb6:	df 92       	push	r13
    2eb8:	ef 92       	push	r14
    2eba:	ff 92       	push	r15
    2ebc:	0f 93       	push	r16
    2ebe:	1f 93       	push	r17
    2ec0:	cf 93       	push	r28
    2ec2:	df 93       	push	r29
    2ec4:	cd b7       	in	r28, 0x3d	; 61
    2ec6:	de b7       	in	r29, 0x3e	; 62
    2ec8:	ca 1b       	sub	r28, r26
    2eca:	db 0b       	sbc	r29, r27
    2ecc:	0f b6       	in	r0, 0x3f	; 63
    2ece:	f8 94       	cli
    2ed0:	de bf       	out	0x3e, r29	; 62
    2ed2:	0f be       	out	0x3f, r0	; 63
    2ed4:	cd bf       	out	0x3d, r28	; 61
    2ed6:	09 94       	ijmp

00002ed8 <__epilogue_restores__>:
    2ed8:	2a 88       	ldd	r2, Y+18	; 0x12
    2eda:	39 88       	ldd	r3, Y+17	; 0x11
    2edc:	48 88       	ldd	r4, Y+16	; 0x10
    2ede:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ee0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ee2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ee4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ee6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ee8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2eea:	b9 84       	ldd	r11, Y+9	; 0x09
    2eec:	c8 84       	ldd	r12, Y+8	; 0x08
    2eee:	df 80       	ldd	r13, Y+7	; 0x07
    2ef0:	ee 80       	ldd	r14, Y+6	; 0x06
    2ef2:	fd 80       	ldd	r15, Y+5	; 0x05
    2ef4:	0c 81       	ldd	r16, Y+4	; 0x04
    2ef6:	1b 81       	ldd	r17, Y+3	; 0x03
    2ef8:	aa 81       	ldd	r26, Y+2	; 0x02
    2efa:	b9 81       	ldd	r27, Y+1	; 0x01
    2efc:	ce 0f       	add	r28, r30
    2efe:	d1 1d       	adc	r29, r1
    2f00:	0f b6       	in	r0, 0x3f	; 63
    2f02:	f8 94       	cli
    2f04:	de bf       	out	0x3e, r29	; 62
    2f06:	0f be       	out	0x3f, r0	; 63
    2f08:	cd bf       	out	0x3d, r28	; 61
    2f0a:	ed 01       	movw	r28, r26
    2f0c:	08 95       	ret

00002f0e <itoa>:
    2f0e:	fb 01       	movw	r30, r22
    2f10:	9f 01       	movw	r18, r30
    2f12:	e8 94       	clt
    2f14:	42 30       	cpi	r20, 0x02	; 2
    2f16:	c4 f0       	brlt	.+48     	; 0x2f48 <itoa+0x3a>
    2f18:	45 32       	cpi	r20, 0x25	; 37
    2f1a:	b4 f4       	brge	.+44     	; 0x2f48 <itoa+0x3a>
    2f1c:	4a 30       	cpi	r20, 0x0A	; 10
    2f1e:	29 f4       	brne	.+10     	; 0x2f2a <itoa+0x1c>
    2f20:	97 fb       	bst	r25, 7
    2f22:	1e f4       	brtc	.+6      	; 0x2f2a <itoa+0x1c>
    2f24:	90 95       	com	r25
    2f26:	81 95       	neg	r24
    2f28:	9f 4f       	sbci	r25, 0xFF	; 255
    2f2a:	64 2f       	mov	r22, r20
    2f2c:	77 27       	eor	r23, r23
    2f2e:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__udivmodhi4>
    2f32:	80 5d       	subi	r24, 0xD0	; 208
    2f34:	8a 33       	cpi	r24, 0x3A	; 58
    2f36:	0c f0       	brlt	.+2      	; 0x2f3a <itoa+0x2c>
    2f38:	89 5d       	subi	r24, 0xD9	; 217
    2f3a:	81 93       	st	Z+, r24
    2f3c:	cb 01       	movw	r24, r22
    2f3e:	00 97       	sbiw	r24, 0x00	; 0
    2f40:	a1 f7       	brne	.-24     	; 0x2f2a <itoa+0x1c>
    2f42:	16 f4       	brtc	.+4      	; 0x2f48 <itoa+0x3a>
    2f44:	5d e2       	ldi	r21, 0x2D	; 45
    2f46:	51 93       	st	Z+, r21
    2f48:	10 82       	st	Z, r1
    2f4a:	c9 01       	movw	r24, r18
    2f4c:	0c 94 a8 17 	jmp	0x2f50	; 0x2f50 <strrev>

00002f50 <strrev>:
    2f50:	dc 01       	movw	r26, r24
    2f52:	fc 01       	movw	r30, r24
    2f54:	67 2f       	mov	r22, r23
    2f56:	71 91       	ld	r23, Z+
    2f58:	77 23       	and	r23, r23
    2f5a:	e1 f7       	brne	.-8      	; 0x2f54 <strrev+0x4>
    2f5c:	32 97       	sbiw	r30, 0x02	; 2
    2f5e:	04 c0       	rjmp	.+8      	; 0x2f68 <strrev+0x18>
    2f60:	7c 91       	ld	r23, X
    2f62:	6d 93       	st	X+, r22
    2f64:	70 83       	st	Z, r23
    2f66:	62 91       	ld	r22, -Z
    2f68:	ae 17       	cp	r26, r30
    2f6a:	bf 07       	cpc	r27, r31
    2f6c:	c8 f3       	brcs	.-14     	; 0x2f60 <strrev+0x10>
    2f6e:	08 95       	ret

00002f70 <__udivmodhi4>:
    2f70:	aa 1b       	sub	r26, r26
    2f72:	bb 1b       	sub	r27, r27
    2f74:	51 e1       	ldi	r21, 0x11	; 17
    2f76:	07 c0       	rjmp	.+14     	; 0x2f86 <__udivmodhi4_ep>

00002f78 <__udivmodhi4_loop>:
    2f78:	aa 1f       	adc	r26, r26
    2f7a:	bb 1f       	adc	r27, r27
    2f7c:	a6 17       	cp	r26, r22
    2f7e:	b7 07       	cpc	r27, r23
    2f80:	10 f0       	brcs	.+4      	; 0x2f86 <__udivmodhi4_ep>
    2f82:	a6 1b       	sub	r26, r22
    2f84:	b7 0b       	sbc	r27, r23

00002f86 <__udivmodhi4_ep>:
    2f86:	88 1f       	adc	r24, r24
    2f88:	99 1f       	adc	r25, r25
    2f8a:	5a 95       	dec	r21
    2f8c:	a9 f7       	brne	.-22     	; 0x2f78 <__udivmodhi4_loop>
    2f8e:	80 95       	com	r24
    2f90:	90 95       	com	r25
    2f92:	bc 01       	movw	r22, r24
    2f94:	cd 01       	movw	r24, r26
    2f96:	08 95       	ret

00002f98 <_exit>:
    2f98:	f8 94       	cli

00002f9a <__stop_program>:
    2f9a:	ff cf       	rjmp	.-2      	; 0x2f9a <__stop_program>
